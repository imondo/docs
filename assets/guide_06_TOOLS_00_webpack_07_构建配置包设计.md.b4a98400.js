import{_ as a,c as e,o as l,a as i}from"./app.90b3aaf2.js";const b=JSON.parse('{"title":"构建配置包设计","description":"","frontmatter":{},"headers":[],"relativePath":"guide/06_TOOLS/00_webpack/07_构建配置包设计.md","lastUpdated":1670824057000}'),s={name:"guide/06_TOOLS/00_webpack/07_构建配置包设计.md"},n=i(`<h1 id="构建配置包设计" tabindex="-1">构建配置包设计 <a class="header-anchor" href="#构建配置包设计" aria-hidden="true">#</a></h1><h2 id="构建配置抽离成-npm-包的意义" tabindex="-1">构建配置抽离成 npm 包的意义 <a class="header-anchor" href="#构建配置抽离成-npm-包的意义" aria-hidden="true">#</a></h2><ul><li>通用性 <ul><li>业务开发者无需关注构建配置，提升开发效率</li><li>统一团队构建脚本</li></ul></li><li>可维护性 <ul><li>构建配置合理的拆分</li><li>文档，REARME文档，ChangeLog文档</li></ul></li><li>质量 <ul><li>冒烟测试，单元测试，测试覆盖率</li><li>持续集成</li></ul></li></ul><h2 id="可选方案" tabindex="-1">可选方案 <a class="header-anchor" href="#可选方案" aria-hidden="true">#</a></h2><ul><li>通过多个配置文件管理不同环境的构建，webpack --config 参数进行控制</li><li>将构建配置设计成一个库，比如：hjs-webpack</li><li>抽成一个工具进行管理，比如：create-react-app</li><li>将所有的配置放在一个文件，通过 --env 参数控制分支选择</li></ul><h2 id="设计" tabindex="-1">设计 <a class="header-anchor" href="#设计" aria-hidden="true">#</a></h2><p>通过多个配置文件管理不同环境配置</p><ul><li><p>基础配置：webpack.base.js</p></li><li><p>开发环境：webpack.dev.js</p></li><li><p>生成环境：webpack.prod.js</p><p>...</p></li></ul><p>抽离成一个 npm 包统一管理</p><ul><li>规范：git commit 日志，README，ESLint 规范，Semver规范</li><li>质量：冒烟测试，单元测试，测试覆盖率和 CI</li></ul><h2 id="webpack-merge-组合配置" tabindex="-1">webpack-merge 组合配置 <a class="header-anchor" href="#webpack-merge-组合配置" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">merge</span><span style="color:#A6ACCD;">(baseConfig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> devConfig)</span></span>
<span class="line"></span></code></pre></div><h2 id="冒烟测试" tabindex="-1">冒烟测试 <a class="header-anchor" href="#冒烟测试" aria-hidden="true">#</a></h2><p>冒烟测试是指提交测试的软件在进行详细深入的测试之前而进行的预测试</p><p>主要目的</p><ul><li>暴露导致软件需要重新发布的基本功能失效等严重问题</li></ul><h3 id="冒烟测试执行" tabindex="-1">冒烟测试执行 <a class="header-anchor" href="#冒烟测试执行" aria-hidden="true">#</a></h3><ul><li>构建是否成功</li><li>每次构建完成 build 目录是否有内容输出 <ul><li>是否有 JS、CSS 等静态文件</li><li>是否有 HTML 文件</li></ul></li></ul><h2 id="持续集成" tabindex="-1">持续集成 <a class="header-anchor" href="#持续集成" aria-hidden="true">#</a></h2><p>优点</p><ul><li>快速发现错误</li><li>防止分支大幅度偏离主干</li></ul><p>代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成</p>`,22),r=[n];function p(t,c,d,o,h,u){return l(),e("div",null,r)}const m=a(s,[["render",p]]);export{b as __pageData,m as default};
