import{_ as s,c as a,o as n,a as l}from"./app.e8feb119.js";const F=JSON.parse('{"title":"数据类型与变量","description":"","frontmatter":{},"headers":[],"relativePath":"series/03_Swift/01_数据类型与变量.md","lastUpdated":1670894937000}'),p={name:"series/03_Swift/01_数据类型与变量.md"},o=l(`<h1 id="数据类型与变量" tabindex="-1">数据类型与变量 <a class="header-anchor" href="#数据类型与变量" aria-hidden="true">#</a></h1><p>声明变量时可指定它的数据类型。</p><ul><li><p>Int：整数类型</p></li><li><p>UInt：无符号整型，一般不推荐</p></li><li><p>浮点数：浮点类型比整数类型表示的范围更大，可以存储比Int类型更大或者更小的数字</p><ul><li><p>Double：表示 64 位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型</p></li><li><p>Fload：表示 32 位浮点数。精度要求不高的话可以使用此类型</p></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Double</code> 精确度很高，至少有 15 位数字，而 Float 最少只有 6 位数字。选择哪个类型取决于你的代码需要处理的值的范围</p></div><ul><li>Bool</li></ul><p>布尔常量：<code>true</code> 和 <code>false</code></p><ul><li>String</li></ul><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imondo.cn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>Character</li></ul><p>字符指单个字母</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><ul><li>Optional</li></ul><p>可选类型来处理值可能缺失的情况。可选类型表示有值或没有值</p><h2 id="数值范围" tabindex="-1">数值范围 <a class="header-anchor" href="#数值范围" aria-hidden="true">#</a></h2><table><thead><tr><th>类型</th><th>大小（字节）</th><th>区间值</th></tr></thead><tbody><tr><td>Int8</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>UInt8</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>Int32</td><td>4 字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>UInt3</td><td>24 字节</td><td>0 到 4294967295</td></tr><tr><td>Int64</td><td>8 字节</td><td>-9223372036854775808 到 9223372036854775807</td></tr><tr><td>UInt6</td><td>48 字节</td><td>0 到 18446744073709551615</td></tr><tr><td>Float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38 (~6 digits)</td></tr><tr><td>Double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308 (~15 digits)</td></tr></tbody></table><h2 id="类型别名" tabindex="-1">类型别名 <a class="header-anchor" href="#类型别名" aria-hidden="true">#</a></h2><p>类型别名对当前的类型定义了另一个名字，类型别名通过使用 <code>typealias</code> 关键字来定义。</p><p>语法格式如下：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">typealias</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">newname</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> type</span></span>
<span class="line"></span></code></pre></div><p>例如以下定义了 Int 的类型别名为 Feet：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">typealias</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Feet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"></span></code></pre></div><p>现在我们可以通过别名来定义变量</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cocoa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">typealias</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Feet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Int</span></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> num: Feet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>输出结果仍是：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">100</span></span>
<span class="line"></span></code></pre></div><h2 id="类型安全" tabindex="-1">类型安全 <a class="header-anchor" href="#类型安全" aria-hidden="true">#</a></h2><p>Swift 是一个类型安全的语言。由于是类型安全的，所以在编译时会要进行类型检查，并把不匹配的类型标记为错误。</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cocoa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> varA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span></span>
<span class="line"><span style="color:#A6ACCD;">varA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imondo.cn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">varA</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>编译时，会报错。</p><h2 id="类型推断" tabindex="-1">类型推断 <a class="header-anchor" href="#类型推断" aria-hidden="true">#</a></h2><p>当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型</p><p>如果你没有显式指定类型，Swift 会使用类型推断（type inference）来选择合适的类型。</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span></span>
<span class="line"><span style="color:#676E95;">// 会推测为 Int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> PI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3.14159</span></span>
<span class="line"><span style="color:#676E95;">// 会被推测为 Double 类型</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当推断浮点数的类型时，<code>Swift</code> 总是会选择 <code>Double</code> 而不是 <code>Float</code></p></div><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-hidden="true">#</a></h2><p>变量声明</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 存储型变量或存储型变量属性</span></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imondo.cn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 常量</span></span>
<span class="line"><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"></span></code></pre></div><ul><li><p>变量名可以由字母，数字和下划线组成。</p></li><li><p>变量名需要以字母或下划线开始。</p></li><li><p>Swift 是一个区分大小写的语言，所以字母大写与小写是不一样的。</p></li></ul><p>变量和常量可以使用 <code>print</code> 函数来输出。在字符串中可以使用括号与反斜线来插入变量</p><p>如：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cocoa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Mondo</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> site </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://imondo.cn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">\\(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">的首页为：</span><span style="color:#89DDFF;">\\(</span><span style="color:#A6ACCD;">site</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>执行结果：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Mondo的首页为 https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;">//imondo.cn</span></span>
<span class="line"></span></code></pre></div>`,43),t=[o];function e(c,r,i,d,C,y){return n(),a("div",null,t)}const u=s(p,[["render",e]]);export{F as __pageData,u as default};
