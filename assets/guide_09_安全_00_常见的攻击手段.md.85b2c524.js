import{_ as s,c as a,o as n,a as p}from"./app.90b3aaf2.js";const l="/docs/imgs/comment.png",h=JSON.parse('{"title":"常见的攻击手段","description":"","frontmatter":{},"headers":[],"relativePath":"guide/09_安全/00_常见的攻击手段.md","lastUpdated":1670824057000}'),o={name:"guide/09_安全/00_常见的攻击手段.md"},e=p('<h1 id="常见的攻击手段" tabindex="-1">常见的攻击手段 <a class="header-anchor" href="#常见的攻击手段" aria-hidden="true">#</a></h1><h2 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-hidden="true">#</a></h2><p>攻击者将可以执行的代码注入到网页中。</p><ul><li><p>持久型</p></li><li><p>非持久型</p></li></ul><p>注入点：</p><ul><li><p><code>HTML</code> 节点内容</p></li><li><p><code>HTML</code> 属性（img onerror属性）</p></li><li><p><code>JavaScrit</code> 代码</p></li><li><p>富文本</p></li></ul><p>持久型就是将攻击代码<strong>写入到了数据库</strong>中，这种危害性很大，会导致大量正常访问网站的用户受到攻击。</p><p>举个例子，对于评论功能来说，就得防范持久型 <code>XSS</code> 攻击，因为可以在评论中输入以下内容</p><p><img src="'+l+`" alt="comment.png"></p><p>这种情况如果前后端没有做好防御的话，这段评论就会被存在数据库中，这样每个打开页面的用户都会被攻击到。</p><p>非持久型相比危害小的多，一般通过<strong>修改 URL 参数的方式</strong>加入攻击代码，诱导用户访问链接从而攻击。举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤会导致攻击代码被执行</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- http://www.test.com?test=&lt;script&gt;alert(1)&lt;/script&gt; --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{test}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre></div><p>但是对于这种攻击方式，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御，因为不用确保用户使用了哪类浏览器。</p><p>对于 <code>XSS</code> 攻击来说，通常有两种方式用来防御：</p><h3 id="转义字符" tabindex="-1">转义字符 <a class="header-anchor" href="#转义字符" aria-hidden="true">#</a></h3><p>用户的输入是不可信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杆进行转义处理。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// 将str中的html符号转义,将转义“&#39;，&amp;，&lt;，&quot;，&gt;”五个字符</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">escapeHtml</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">reg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/[</span><span style="color:#C3E88D;">&amp;&lt;&quot;&gt;&#39;</span><span style="color:#89DDFF;">](?:(</span><span style="color:#C3E88D;">amp</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">lt</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">quot</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">gt</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">#39</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">nbsp</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">#\\d</span><span style="color:#89DDFF;">+)</span><span style="color:#C3E88D;">;</span><span style="color:#89DDFF;">)?/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&amp;lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&amp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&amp;amp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&amp;quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&amp;gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&amp;#39;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      )</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">decodehtml</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">((</span><span style="color:#C3E88D;">g</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">l</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">quo</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">t</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">amp</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">#39</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">nbsp</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">;</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&amp;lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&amp;amp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&amp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&amp;quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&amp;gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&amp;#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">&amp;nbsp;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">m</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>通过转义可以将攻击代码 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 变成</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// -&gt; &amp;lt;script&amp;gt;alert(1)&amp;lt;&amp;#x2F;script&amp;gt;</span></span>
<span class="line"><span style="color:#82AAFF;">escapeHtml</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;script&gt;alert(1)&lt;/script&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>但是对于富文本来说，显然不能通过上面的方法来转义所有字符，因为这样会把需要的格式也会过滤掉。对于这种可以使用 <a href="https://jsxss.com/zh/index.html" target="_blank" rel="noreferrer">js-xss</a> 插件来实现，设置<strong>白名单过滤</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> xss </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xss</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> html </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xss</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;h1 id=&quot;title&quot;&gt;XSS Demo&lt;/h1&gt;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">// -&gt; &lt;h1&gt;XSS Demo&lt;/h1&gt;&amp;lt;script&amp;gt;alert(&quot;xss&quot;);&amp;lt;/script&amp;gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(html)</span></span>
<span class="line"></span></code></pre></div><h3 id="csp" tabindex="-1">CSP <a class="header-anchor" href="#csp" aria-hidden="true">#</a></h3><p>CSP 本质就是建立白名单。开发者明确浏览器哪些外部的资源可以加载和执行，只需要<strong>配置相关规则</strong>，如何拦截由浏览器自己实现；可以通过这种方式来尽量减少 <code>XSS</code> 攻击。</p><p>通过两种方式开启 CSP：</p><ul><li>设置 <code>HTTP Header</code> 中的 <code>Content-Security-Policy</code></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;"># 只允许加载本站资源</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Security-Policy: default-src ‘self’</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 只允许加载 HTTPS 协议图片</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Security-Policy: img-src https://</span><span style="color:#89DDFF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># 允许加载任何来源框架</span></span>
<span class="line"><span style="color:#A6ACCD;">Content-Security-Policy: child-src </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>更多设置可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank" rel="noreferrer">文档</a></p><ul><li>设置 <code>meta</code> 标签的方式 <code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</code></li></ul><p>这种方式，只要开发者配置正确的规则，那么即使网站存在漏洞，攻击者页不能执行它的攻击代码，并且 <code>CSP</code> 的兼容性也不错。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>幸运的是目前前端主流的框架已解决 <code>XSS</code> 攻击，如：Vue、React、Angular</p></div><h2 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-hidden="true">#</a></h2><p>CSRF - 跨站请求伪造。</p><p>在其它的网站对目标网站发送请求，而这些请求是在用户不知情的情况下完成的。它是发生在匿名的情况下，第三方网站，带上Cookies，向你的网站发送请求，不访问你的前端。</p><p><strong>攻击原理</strong></p><ul><li><p>用户登录 <code>A</code> 网站</p></li><li><p><code>A</code> 网站确认身份</p></li><li><p><code>B</code> 网站向 <code>A</code> 网站发送请求（带 <code>A</code> 网站的身份）</p></li></ul><p>举个例子，假设网站由一个通过 <code>GET</code> 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.test.com/xxx?comment=&#39;attack&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p>那么你是否会想到使用 <code>POST</code> 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 <code>POST</code> 请求。</p><h3 id="防御" tabindex="-1">防御 <a class="header-anchor" href="#防御" aria-hidden="true">#</a></h3><p>防御 CSRF 可以遵循以下规则：</p><ul><li><p>GET 请求不对数据进行修改</p></li><li><p>不让第三方网站访问到用户 <code>Cookie</code></p></li><li><p>阻止第三方网站请求接口</p></li><li><p>请求时附带验证信息，如 <code>TOKEN</code></p></li></ul><h4 id="samesite" tabindex="-1">SameSite <a class="header-anchor" href="#samesite" aria-hidden="true">#</a></h4><p>可以对 <code>Cookie</code> 设置 <code>SameSite</code> 属性。该属性表示 <code>Cookie</code> 不随着跨域请求发送，可以很大程度减少 <code>CSRF</code> 的攻击，但是该属性目前并不是所有浏览器都兼容。</p><h4 id="referer" tabindex="-1">Referer <a class="header-anchor" href="#referer" aria-hidden="true">#</a></h4><p>对于需要防范 <code>CSRF</code> 的请求，我们可以通过验证 <code>Referer</code> 来判断该请求是否为第三方网站发起的。</p><h4 id="token" tabindex="-1">Token <a class="header-anchor" href="#token" aria-hidden="true">#</a></h4><p>服务器下发一个随机 <code>Token</code>，每次发起请求时将 <code>Token</code> 携带上，服务器验证 <code>Token</code> 是否有效。</p><h2 id="点击劫持" tabindex="-1">点击劫持 <a class="header-anchor" href="#点击劫持" aria-hidden="true">#</a></h2><p>点击劫持是一种视觉欺骗的攻击手段。</p><p>攻击者将需要攻击的网站通过 <code>iframe</code> 嵌套的方式嵌入自己的网页中，并将 <code>iframe</code> 设置为透明，在页面中透出一个按钮诱导用户点击。</p><ul><li>X-FRAME-OPTIONS</li></ul><p><code>X-FRAME-OPTIONS</code> 是一个 <code>HTTP</code> 响应头。这个 <code>HTTP</code> 响应头 就是为了防御用 <code>iframe</code> 嵌套的点击劫持攻击。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">header</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">X-Frame-Options:DENY</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>该响应头有三个值可选，分别是</p><ol><li><p><code>DENY</code>：表示页面<strong>不允许</strong>通过 <code>iframe</code> 的方式展示</p></li><li><p><code>SAMEORIGIN</code>：表示页面可以在<strong>相同域名</strong>下通过 <code>iframe</code> 的方式展示</p></li><li><p><code>ALLOW-FROM</code>：表示页面可以在<strong>指定来源</strong>的 <code>iframe</code> 中展示</p></li></ol><ul><li>JS 防御</li></ul><p>JavaScript 禁止内嵌</p><div class="language-JS"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (top.location != window.location)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        top</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="上传问题" tabindex="-1">上传问题 <a class="header-anchor" href="#上传问题" aria-hidden="true">#</a></h2><ul><li><p>上传文件</p></li><li><p>再次访问上传的文件</p></li><li><p>上传的文件被当成程序解析</p></li></ul><h3 id="上传问题防御" tabindex="-1">上传问题防御 <a class="header-anchor" href="#上传问题防御" aria-hidden="true">#</a></h3><ul><li><p>限制上传的后缀</p></li><li><p>检查文件类型</p></li><li><p>检查文件内容</p></li><li><p>程序输出</p></li><li><p>权限控制——可写可执行互斥</p></li></ul><h2 id="中间人攻击" tabindex="-1">中间人攻击 <a class="header-anchor" href="#中间人攻击" aria-hidden="true">#</a></h2><p>中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。</p><p>通常来说不建议使用公共的 <code>Wi-Fi</code>，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。</p><h3 id="防御-1" tabindex="-1">防御 <a class="header-anchor" href="#防御-1" aria-hidden="true">#</a></h3><ul><li>增加一个安全通道来传输信息</li></ul><p><code>HTTPS</code> 就可以用来防御中间人攻击，但是并不是说使用了 <code>HTTPS</code> 就可以高枕无忧了，因为如果你没有完全关闭 <code>HTTP</code> 访问的话，攻击方可以通过某些方式将 <code>HTTPS</code> 降级为 <code>HTTP</code> 从而实现中间人攻击。</p>`,68),c=[e];function t(r,F,D,y,i,d){return n(),a("div",null,c)}const u=s(o,[["render",t]]);export{h as __pageData,u as default};
