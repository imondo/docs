import{_ as s,c as a,o as n,a as l}from"./app.62276965.js";const C=JSON.parse('{"title":"Vue.js 组件编码规范","description":"","frontmatter":{},"headers":[],"relativePath":"guide/04_FRONTEND/01_Vue/06_组件编码规范.md","lastUpdated":1670837715000}'),p={name:"guide/04_FRONTEND/01_Vue/06_组件编码规范.md"},o=l(`<h1 id="vue-js-组件编码规范" tabindex="-1">Vue.js 组件编码规范 <a class="header-anchor" href="#vue-js-组件编码规范" aria-hidden="true">#</a></h1><blockquote><p>这个 <a href="https://github.com/sqrthree/vuejs-component-style-guide/compare/master...pablohpsilva:master" target="_blank" rel="noreferrer">链接</a> 用来查看本翻译与英文版是否有差别（如果你没有看到 <a href="http://README.md" target="_blank" rel="noreferrer">README.md</a> 发生变化，那就意味着这份翻译文档是最新的）。</p></blockquote><p align="center"><img src="https://raw.githubusercontent.com/pablohpsilva/vuejs-component-style-guide/master/img/logo.png"></p><h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-hidden="true">#</a></h2><p>本规范提供了一种统一的编码规范来编写 <a href="http://vuejs.org/" target="_blank" rel="noreferrer">Vue.js</a> 代码。这使得代码具有如下的特性：</p><ul><li>其它开发者或是团队成员更容易阅读和理解。</li><li>IDEs 更容易理解代码，从而提供高亮、格式化等辅助功能</li><li>更容易使用现有的工具</li><li>更容易实现缓存以及代码包的分拆</li></ul><p>本指南为 <a href="https://github.com/voorhoede" target="_blank" rel="noreferrer">De Voorhoede</a> 参考 <a href="https://github.com/voorhoede/riotjs-style-guide" target="_blank" rel="noreferrer">RiotJS 编码规范</a> 而写。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-hidden="true">#</a></h2><ul><li><a href="#%E5%9F%BA%E4%BA%8E%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91">基于模块开发</a></li><li><a href="#vue-%E7%BB%84%E4%BB%B6%E5%91%BD%E5%90%8D">vue 组件命名</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8D%95%E5%8C%96">组件表达式简单化</a></li><li><a href="#%E7%BB%84%E4%BB%B6-props-%E5%8E%9F%E5%AD%90%E5%8C%96">组件 props 原子化</a></li><li><a href="#%E9%AA%8C%E8%AF%81%E7%BB%84%E4%BB%B6%E7%9A%84-props">验证组件的 props</a></li><li><a href="#%E5%B0%86-this-%E8%B5%8B%E5%80%BC%E7%BB%99-component-%E5%8F%98%E9%87%8F">将 <code>this</code> 赋值给 <code>component</code> 变量</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E7%BB%93%E6%9E%84%E5%8C%96">组件结构化</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6%E5%91%BD%E5%90%8D">组件事件命名</a></li><li><a href="#%E9%81%BF%E5%85%8D-this.$parent">避免 <code>this.$parent</code></a></li><li><a href="#%E8%B0%A8%E6%85%8E%E4%BD%BF%E7%94%A8-this.$refs">谨慎使用 <code>this.$refs</code></a></li><li><a href="#%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E5%90%8D%E4%BD%9C%E4%B8%BA%E6%A0%B7%E5%BC%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%A9%BA%E9%97%B4">使用组件名作为样式作用域空间</a></li><li><a href="#%E6%8F%90%E4%BE%9B%E7%BB%84%E4%BB%B6-api-%E6%96%87%E6%A1%A3">提供组件 API 文档</a></li><li><a href="#%E6%8F%90%E4%BE%9B%E7%BB%84%E4%BB%B6-demo">提供组件 demo</a></li><li><a href="#%E5%AF%B9%E7%BB%84%E4%BB%B6%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%A0%A1%E9%AA%8C">对组件文件进行代码校验</a></li><li><a href="#%E5%8F%AA%E5%9C%A8%E9%9C%80%E8%A6%81%E6%97%B6%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6">只在需要时创建组件</a></li></ul><h2 id="基于模块开发" tabindex="-1">基于模块开发 <a class="header-anchor" href="#基于模块开发" aria-hidden="true">#</a></h2><p>始终基于模块的方式来构建你的 app，每一个子模块只做一件事情。</p><p>Vue.js 的设计初衷就是帮助开发者更好的开发界面模块。一个模块是应用程序中独立的一个部分。</p><h3 id="怎么做" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做" aria-hidden="true">#</a></h3><p>每一个 Vue 组件（等同于模块）<a href="./(https://addyosmani.com/first/)">首先</a>必须专注于解决一个<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noreferrer">单一的问题</a>，<em>独立的</em>、<em>可复用的</em>、<em>微小的</em> 和 <em>可测试的</em>。</p><p>如果你的组件做了太多的事或是变得臃肿，请将其拆分成更小的组件并保持单一的原则。一般来说，尽量保证每一个文件的代码行数不要超过 100 行。也请保证组件可独立的运行。比较好的做法是增加一个单独的 demo 示例。</p><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="vue-组件命名" tabindex="-1">Vue 组件命名 <a class="header-anchor" href="#vue-组件命名" aria-hidden="true">#</a></h2><p>组件的命名需遵从以下原则：</p><ul><li><strong>有意义的</strong>: 不过于具体，也不过于抽象</li><li><strong>简短</strong>: 2 到 3 个单词</li><li><strong>具有可读性</strong>: 以便于沟通交流</li></ul><p>同时还需要注意：</p><ul><li>必须符合<strong>自定义元素规范</strong>: <a href="https://www.w3.org/TR/custom-elements/#concepts" target="_blank" rel="noreferrer">使用连字符</a>分隔单词，切勿使用保留字。</li><li><strong><code>app-</code> 前缀作为命名空间</strong>: 如果非常通用的话可使用一个单词来命名，这样可以方便于其它项目里复用。</li></ul><h3 id="为什么" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么" aria-hidden="true">#</a></h3><ul><li>组件是通过组件名来调用的。所以组件名必须简短、富有含义并且具有可读性。</li></ul><h3 id="如何做" tabindex="-1">如何做？ <a class="header-anchor" href="#如何做" aria-hidden="true">#</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- 推荐 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">app-header</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">app-header</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">user-list</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">user-list</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">range-slider</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">range-slider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">&lt;!-- 避免 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">btn-group</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">btn-group</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">&lt;!-- 虽然简短但是可读性差. 使用 \`button-group\` 替代 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ui-slider</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">ui-slider</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">&lt;!-- ui 前缀太过于宽泛，在这里意义不明确 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slider</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">slider</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">&lt;!-- 与自定义元素规范不兼容 --&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="组件表达式简单化" tabindex="-1">组件表达式简单化 <a class="header-anchor" href="#组件表达式简单化" aria-hidden="true">#</a></h2><p>Vue.js 的表达式是 100% 的 Javascript 表达式。这使得其功能性很强大，但也带来潜在的复杂性。因此，你应该尽量<strong>保持表达式的简单化</strong>。</p><h3 id="为什么-1" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-1" aria-hidden="true">#</a></h3><ul><li>复杂的行内表达式难以阅读。</li><li>行内表达式是不能够通用的，这可能会导致重复编码的问题。</li><li>IDE 基本上不能识别行内表达式语法，所以使用行内表达式 IDE 不能提供自动补全和语法校验功能。</li></ul><h3 id="怎么做-1" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-1" aria-hidden="true">#</a></h3><p>如果你发现写了太多复杂并难以阅读的行内表达式，那么可以使用 method 或是 computed 属性来替代其功能。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- 推荐 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {{ \`\${year}-\${month}\` }}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">month</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">twoDigits</span><span style="color:#F07178;">((</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getUTCMonth</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">year</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getUTCFullYear</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">twoDigits</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">&lt;!-- 避免 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    {{ \`\${(new Date()).getUTCFullYear()}-\${(&#39;0&#39; + ((new Date()).getUTCMonth()+1)).slice(-2)}\` }}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h3 id="组件-props-原子化" tabindex="-1">组件 props 原子化 <a class="header-anchor" href="#组件-props-原子化" aria-hidden="true">#</a></h3><p>虽然 Vue.js 支持传递复杂的 JavaScript 对象通过 props 属性，但是你应该尽可能的使用原始类型的数据。尽量只使用 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noreferrer">JavaScript 原始类型</a>（字符串、数字、布尔值）和函数。尽量避免复杂的对象。</p><h3 id="为什么-2" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-2" aria-hidden="true">#</a></h3><ul><li>使得组件 API 清晰直观。</li><li>只使用原始类型和函数作为 props 使得组件的 API 更接近于 HTML(5) 原生元素。</li><li>其它开发者更好的理解每一个 prop 的含义、作用。</li><li>传递过于复杂的对象使得我们不能够清楚的知道哪些属性或方法被自定义组件使用，这使得代码难以重构和维护。</li></ul><h3 id="怎么做-2" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-2" aria-hidden="true">#</a></h3><p>组件的每一个属性单独使用一个 props，并且使用函数或是原始类型的值。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- 推荐 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">range-slider</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:values</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[10, 20]</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">min</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">max</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">100</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">step</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">5</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:on-slide</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">updateInputs</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:on-end</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">updateResults</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">range-slider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">&lt;!-- 避免 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">range-slider</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:config</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">complexConfigObject</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">range-slider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="验证组件的-props" tabindex="-1">验证组件的 props <a class="header-anchor" href="#验证组件的-props" aria-hidden="true">#</a></h2><p>在 Vue.js 中，组件的 props 即 API，一个稳定并可预测的 API 会使得你的组件更容易被其他开发者使用。</p><p>组件 props 通过自定义标签的属性来传递。属性的值可以是 Vue.js 字符串(<code>:attr=&quot;value&quot;</code> 或 <code>v-bind:attr=&quot;value&quot;</code>)或是不传。你需要保证组件的 props 能应对不同的情况。</p><h3 id="为什么-3" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-3" aria-hidden="true">#</a></h3><p>验证组件 props 可以保证你的组件永远是可用的（防御性编程）。即使其他开发者并未按照你预想的方法使用时也不会出错。</p><h3 id="怎么做-3" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-3" aria-hidden="true">#</a></h3><ul><li>提供默认值。</li><li>使用 <code>type</code> 属性<a href="http://vuejs.org/v2/guide/components.html#Prop-Validation" target="_blank" rel="noreferrer">校验类型</a>。</li><li>使用 props 之前先检查该 prop 是否存在。</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">range</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:max</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">max</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:min</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">min</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">max</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 这里添加了数字类型的校验</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">min</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="将-this-赋值给-component-变量" tabindex="-1">将 <code>this</code> 赋值给 <code>component</code> 变量 <a class="header-anchor" href="#将-this-赋值给-component-变量" aria-hidden="true">#</a></h2><p>在 Vue.js 组件上下文中，<code>this</code>指向了组件实例。因此当你切换到了不同的上下文时，要确保 <code>this</code> 指向一个可用的 <code>component</code> 变量。</p><p>换句话说，如果你正在使用 <strong>ES6</strong> 的话，就不要再编写 <code>var self = this;</code> 这样的代码了，您可以安全地使用 Vue 组件。</p><h3 id="为什么-4" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-4" aria-hidden="true">#</a></h3><ul><li>使用 <strong>ES6</strong>，就不再需要将 <code>this</code> 保存到一个变量中了。</li><li>一般来说，当你使用箭头函数时，会保留 <code>this</code> 的作用域。（译者注：箭头函数没有它自己的 this 值，箭头函数内的 this 值继承自外围作用域。）</li><li>如果你没有使用 <strong>ES6</strong>，当然也就不会使用 <code>箭头函数</code> 啦，那你必须将 “this” 保存到到某个变量中。这是唯一的例外。</li></ul><h3 id="怎么做-4" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-4" aria-hidden="true">#</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">hello</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">printHello</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">hello</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">&lt;!-- 避免 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">hello</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">printHello</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span><span style="color:#F07178;"> </span><span style="color:#676E95;">// 没有必要</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hello</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="组件结构化" tabindex="-1">组件结构化 <a class="header-anchor" href="#组件结构化" aria-hidden="true">#</a></h2><p>按照一定的结构组织，使得组件便于理解。</p><h3 id="为什么-5" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-5" aria-hidden="true">#</a></h3><ul><li>导出一个清晰、组织有序的组件，使得代码易于阅读和理解。同时也便于标准化。</li><li>按首字母排序 properties、data、computed、watches 和 methods 使得这些对象内的属性便于查找。</li><li>合理组织，使得组件易于阅读。（name; extends; props, data 和 computed; components; watch 和 methods; lifecycle methods 等）。</li><li>使用 <code>name</code> 属性。借助于 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en" target="_blank" rel="noreferrer">vue devtools</a> 可以让你更方便的测试。</li><li>合理的 CSS 结构，如 <a href="https://medium.com/tldr-tech/bem-blocks-elements-and-modifiers-6b3b0af9e3ea#.bhnomd7gw" target="_blank" rel="noreferrer">BEM</a> 或 <a href="https://github.com/rstacruz/rscss" target="_blank" rel="noreferrer">rscss</a> - <a href="#%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E5%90%8D%E4%BD%9C%E4%B8%BA%E6%A0%B7%E5%BC%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%A9%BA%E9%97%B4">详情？</a>。</li><li>使用单文件 .vue 文件格式来组件代码。</li></ul><h3 id="怎么做-5" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-5" aria-hidden="true">#</a></h3><p>组件结构化</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">html</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Ranger__Wrapper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">&lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 不要忘记了 name 属性</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">RangeSlider</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 使用组件 mixins 共享通用功能</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">mixins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 组成新的组件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 组件属性、变量</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 按字母顺序</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">fooBar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 变量</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 使用其它组件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// 生命周期函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">beforeCreate</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">mounted</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Ranger__Wrapper</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="组件事件命名" tabindex="-1">组件事件命名 <a class="header-anchor" href="#组件事件命名" aria-hidden="true">#</a></h2><p>Vue.js 提供的处理函数和表达式都是绑定在 ViewModel 上的，组件的每一个事件都应该按照一个好的命名规范来，这样可以避免不少的开发问题，具体可见如下 <strong>为什么</strong>。</p><h3 id="为什么-6" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-6" aria-hidden="true">#</a></h3><ul><li>开发者可以随意给事件命名，即使是原生事件的名字，这样会带来迷惑性。</li><li>过于宽松的事件命名可能与 <a href="https://vuejs.org/v2/guide/components.html#DOM-Template-Parsing-Caveats" target="_blank" rel="noreferrer">DOM 模板不兼容</a>。</li></ul><h3 id="怎么做-6" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-6" aria-hidden="true">#</a></h3><ul><li>事件名也使用连字符命名。</li><li>一个事件的名字对应组件外的一组意义操作，如：upload-success、upload-error 以及 dropzone-upload-success、dropzone-upload-error （如果需要前缀的话）。</li><li>事件命名应该以动词（如 client-api-load） 或是 名词（如 drive-upload-success）结尾。（<a href="https://github.com/GoogleWebComponents/style-guide#events" target="_blank" rel="noreferrer">出处</a>）</li></ul><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="避免-this-parent" tabindex="-1">避免 this.$parent <a class="header-anchor" href="#避免-this-parent" aria-hidden="true">#</a></h2><p>Vue.js 支持组件嵌套，并且子组件可访问父组件的上下文。访问组件之外的上下文违反了<a href="#%E5%9F%BA%E4%BA%8E%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91">基于模块开发</a>的<a href="https://addyosmani.com/first/" target="_blank" rel="noreferrer">第一原则</a>。因此你应该尽量避免使用 <strong><code>this.$parent</code></strong>。</p><h3 id="为什么-7" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-7" aria-hidden="true">#</a></h3><ul><li>组件必须相互保持独立，Vue 组件也是。如果组件需要访问其父层的上下文就违反了该原则。</li><li>如果一个组件需要访问其父组件的上下文，那么该组件将不能在其它上下文中复用。</li></ul><h3 id="怎么做-7" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-7" aria-hidden="true">#</a></h3><ul><li>通过 props 将值传递给子组件。</li><li>通过 props 传递回调函数给子组件来达到调用父组件方法的目的。</li><li>通过在子组件触发事件来通知父组件。</li></ul><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="谨慎使用-this-refs" tabindex="-1">谨慎使用 this.$refs <a class="header-anchor" href="#谨慎使用-this-refs" aria-hidden="true">#</a></h2><p>Vue.js 支持通过 <code>ref</code> 属性来访问其它组件和 HTML 元素。并通过 <code>this.$refs</code> 可以得到组件或 HTML 元素的上下文。在大多数情况下，通过 <code>this.$refs</code>来访问其它组件的上下文是可以避免的。在使用的的时候你需要注意避免调用了不恰当的组件 API，所以应该尽量避免使用 <code>this.$refs</code>。</p><h3 id="为什么-8" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-8" aria-hidden="true">#</a></h3><ul><li>组件必须是保持独立的，如果一个组件的 API 不能够提供所需的功能，那么这个组件在设计、实现上是有问题的。</li><li>组件的属性和事件必须足够的给大多数的组件使用。</li></ul><h3 id="怎么做-8" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-8" aria-hidden="true">#</a></h3><ul><li>提供良好的组件 API。</li><li>总是关注于组件本身的目的。</li><li>拒绝定制代码。如果你在一个通用的组件内部编写特定需求的代码，那么代表这个组件的 API 不够通用，或者你可能需要一个新的组件来应对该需求。</li><li>检查所有的 props 是否有缺失的，如果有提一个 issue 或是完善这个组件。</li><li>检查所有的事件。子组件向父组件通信一般是通过事件来实现的，但是大多数的开发者更多的关注于 props 从忽视了这点。</li><li><strong>Props向下传递，事件向上传递！</strong>。以此为目标升级你的组件，提供良好的 API 和 独立性。</li><li>当遇到 props 和 events 难以实现的功能时，通过 <code>this.$refs</code>来实现。</li><li>当需要操作 DOM 无法通过指令来做的时候可使用 <code>this.$ref</code> 而不是 <code>JQuery</code>、<code>document.getElement*</code>、<code>document.queryElement</code>。</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- 推荐，并未使用 this.$refs --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">range</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:max</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">max</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:min</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">min</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">@current-value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">currentValue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:step</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">range</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- 使用 this.$refs 的适用情况--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">modal</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">basicModal</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h4</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Basic Modal</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h4</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">primary</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$refs.basicModal.hide()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Close</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">modal</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$refs.basicModal.open()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Open modal</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">&lt;!-- Modal component --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-show</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">active</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;">&lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        active</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">open</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">active</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">hide</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">active</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">&lt;!-- 如果可通过 emited 来做则避免通过 this.$refs 直接访问 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">range</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:max</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">max</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:min</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">min</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">range</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">:step</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">range</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">getRangeCurrentValue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$refs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">range</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">currentValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="使用组件名作为样式作用域空间" tabindex="-1">使用组件名作为样式作用域空间 <a class="header-anchor" href="#使用组件名作为样式作用域空间" aria-hidden="true">#</a></h2><p>Vue.js 的组件是自定义元素，这非常适合用来作为样式的根作用域空间。可以将组件名作为 CSS 类的命名空间。</p><h3 id="为什么-9" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-9" aria-hidden="true">#</a></h3><ul><li>给样式加上作用域空间可以避免组件样式影响外部的样式。</li><li>保持模块名、目录名、样式根作用域名一样，可以很好的将其关联起来，便于开发者理解。</li></ul><h3 id="怎么做-9" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-9" aria-hidden="true">#</a></h3><p>使用组件名作为样式命名的前缀，可基于 BEM 或 OOCSS 范式。同时给 style 标签加上 scoped 属性。加上 scoped 属性编译后会给组件的 class 自动加上唯一的前缀从而避免样式的冲突。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* 推荐 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">MyExample</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">MyExample</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">li</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">MyExample__item</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;">/* 避免 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">My-Example</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* 没有用组件名或模块名限制作用域, 不符合 BEM 规范 */</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="提供组件-api-文档" tabindex="-1">提供组件 API 文档 <a class="header-anchor" href="#提供组件-api-文档" aria-hidden="true">#</a></h2><p>使用 Vue.js 组件的过程中会创建 Vue 组件实例，这个实例是通过自定义属性配置的。为了便于其他开发者使用该组件，对于这些自定义属性即组件API应该在 <code>README.md</code> 文件中进行说明。</p><h2 id="为什么-10" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-10" aria-hidden="true">#</a></h2><ul><li>良好的文档可以让开发者比较容易的对组件有一个整体的认识，而不用去阅读组件的源码，也更方便开发者使用。</li><li>组件配置属性即组件的 API，对于组件的用户来说他们更感兴趣的是 API 而不是实现原理。</li><li>正式的文档会告诉开发者组件 API 变更以及向后的兼容性情况。</li><li><code>README.md</code> 是标准的我们应该首先阅读的文档文件。代码托管网站（GitHub、Bitbucket、Gitlab 等）会默认在仓库中展示该文件作为仓库的介绍。</li></ul><h3 id="怎么做-10" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-10" aria-hidden="true">#</a></h3><p>在模块目录中添加 <code>README.md</code> 文件：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">range-slider/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── range-slider.vue</span></span>
<span class="line"><span style="color:#A6ACCD;">├── range-slider.less</span></span>
<span class="line"><span style="color:#A6ACCD;">└── README.md</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在 README 文件中说明模块的功能以及使用场景。对于 vue 组件来说，比较有用的描述是组件的自定义属性即 API 的描述介绍。</p><h1 id="range-slider" tabindex="-1">Range slider <a class="header-anchor" href="#range-slider" aria-hidden="true">#</a></h1><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-hidden="true">#</a></h2><p>range slider 组件可通过拖动的方式来设置一个给定范围内的数值。</p><p>该模块使用 <a href="http://refreshless.com/nouislider/" target="_blank" rel="noreferrer">noUiSlider</a> 来实现跨浏览器和 touch 功能的支持。</p><h2 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-hidden="true">#</a></h2><p><code>&lt;range-slider&gt;</code> 支持如下的自定义属性：</p><table><thead><tr><th>attribute</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>min</code></td><td>Number</td><td>可拖动的最小值.</td></tr><tr><td><code>max</code></td><td>Number</td><td>可拖动的最大值.</td></tr><tr><td><code>values</code></td><td>Number[] <em>optional</em></td><td>包含最大值和最小值的数组. 如. <code>values=&quot;[10, 20]&quot;</code>. Defaults to <code>[opts.min, opts.max]</code>.</td></tr><tr><td><code>step</code></td><td>Number <em>optional</em></td><td>增加减小的数值单位，默认为 1.</td></tr><tr><td><code>on-slide</code></td><td>Function <em>optional</em></td><td>用户拖动开始按钮或者结束按钮时的回调函数，函数接受 <code>(values, HANDLE)</code> 格式的参数。 如： <code>on-slide={ updateInputs }</code>, <code>component.updateInputs = (values, HANDLE) =&gt; { const value = values[HANDLE]; }</code>.</td></tr><tr><td><code>on-end</code></td><td>Function <em>optional</em></td><td>当用户停止拖动时触发的回调函数，函数接受 <code>(values, HANDLE)</code> 格式的参数。</td></tr></tbody></table><p>如需要自定义 slider 的样式可参考 <a href="./(http://refreshless.com/nouislider/more/#section-styling)">noUiSlider 文档</a></p><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="提供组件-demo" tabindex="-1">提供组件 demo <a class="header-anchor" href="#提供组件-demo" aria-hidden="true">#</a></h2><p>添加 <code>index.html</code> 文件作为组件的 demo 示例，并提供不同配置情况的效果，说明组件是如何使用的。</p><h3 id="为什么-11" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-11" aria-hidden="true">#</a></h3><ul><li>demo 可以说明组件是独立可使用的。</li><li>demo 可以让开发者预览组件的功能效果。</li><li>demo 可以展示组件各种配置参数下的功能。</li></ul><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><h2 id="对组件文件进行代码校验" tabindex="-1">对组件文件进行代码校验 <a class="header-anchor" href="#对组件文件进行代码校验" aria-hidden="true">#</a></h2><p>代码校验可以保持代码的统一性以及追踪语法错误。.vue 文件可以通过使用 <code>eslint-plugin-html</code>插件来校验代码。你可以通过 <code>vue-cli</code> 来开始你的项目，<code>vue-cli</code> 默认会开启代码校验功能。</p><h3 id="为什么-12" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-12" aria-hidden="true">#</a></h3><ul><li>保证所有的开发者使用同样的编码规范。</li><li>更早的感知到语法错误。</li></ul><h3 id="怎么做-11" tabindex="-1">怎么做？ <a class="header-anchor" href="#怎么做-11" aria-hidden="true">#</a></h3><p>为了校验工具能够校验 <code>*.vue</code>文件，你需要将代码编写在 <code>&lt;script&gt;</code>标签中，并使<a href="#%E4%BF%9D%E6%8C%81%E7%BB%84%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8D%95%E5%8C%96">组件表达式简单化</a>，因为校验工具无法理解行内表达式，配置校验工具可以访问全局变量 <code>vue</code> 和组件的 <code>props</code>。</p><h4 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-hidden="true">#</a></h4><p><a href="http://eslint.org/" target="_blank" rel="noreferrer">ESLint</a> 需要通过 <a href="https://github.com/BenoitZugmeyer/eslint-plugin-html#eslint-plugin-html" target="_blank" rel="noreferrer">ESLint HTML 插件</a>来抽取组件中的代码。</p><p>通过 <code>.eslintrc</code> 文件来配置 ESlint，这样 IDE 可以更好的理解校验配置项：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint:recommended</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">plugins</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">html</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">env</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">browser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">globals</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">opts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>运行 ESLint</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">eslint src/</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">/</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">.vue</span></span>
<span class="line"></span></code></pre></div><h4 id="jshint" tabindex="-1">JSHint <a class="header-anchor" href="#jshint" aria-hidden="true">#</a></h4><p><a href="http://jshint.com/" target="_blank" rel="noreferrer">JSHint</a> 可以解析 HTML（使用 <code>--extra-ext</code>命令参数）和抽取代码（使用 <code>--extract=auto</code>命令参数）。</p><p>通过 <code>.jshintrc</code> 文件来配置 ESlint，这样 IDE 可以更好的理解校验配置项。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">browser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">predef</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">opts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>运行 JSHint</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">jshint --config modules/.jshintrc --extra-ext=html --extract=auto modules/</span></span>
<span class="line"></span></code></pre></div><p>注：JSHint 不接受 <code>vue</code> 扩展名的文件，只支持 <code>html</code>。</p><h2 id="只在需要时创建组件" tabindex="-1">只在需要时创建组件 <a class="header-anchor" href="#只在需要时创建组件" aria-hidden="true">#</a></h2><h3 id="为什么-13" tabindex="-1">为什么？ <a class="header-anchor" href="#为什么-13" aria-hidden="true">#</a></h3><p>Vue.js 是一个基于组件的框架。如果你不知道何时创建组件可能会导致以下问题：</p><ul><li>如果组件太大, 可能很难重用和维护;</li><li>如果组件太小，你的项目就会（因为深层次的嵌套而）被淹没，也更难使组件间通信;</li></ul><h3 id="怎么做-12" tabindex="-1">怎么做? <a class="header-anchor" href="#怎么做-12" aria-hidden="true">#</a></h3><ul><li>始终记住为你的项目需求构建你的组件，但是你也应该尝试想到它们能够从中脱颖而出（独立于项目之外）。如果它们能够在你项目之外工作，就像一个库那样，就会使得它们更加健壮和一致。</li><li>尽可能早地构建你的组件总是更好的，因为这样使得你可以在一个已经存在和稳定的组件上构建你的组件间通信（props &amp; events）。</li></ul><h3 id="规则" tabindex="-1">规则 <a class="header-anchor" href="#规则" aria-hidden="true">#</a></h3><ul><li>首先，尽可能早地尝试构建出诸如模态框、提示框、工具条、菜单、头部等这些明显的（通用型）组件。总之，你知道的这些组件以后一定会在当前页面或者是全局范围内需要。</li><li>第二，在每一个新的开发项目中，对于一整个页面或者其中的一部分，在进行开发前先尝试思考一下。如果你认为它有一部分应该是一个组件，那么就创建它吧。</li><li>最后，如果你不确定，那就不要。避免那些“以后可能会有用”的组件污染你的项目。它们可能会永远的只是（静静地）待在那里，这一点也不聪明。注意，一旦你意识到应该这么做，最好是就把它打破，以避免与项目的其他部分构成兼容性和复杂性。</li></ul><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><hr><h2 id="尽可能使用-mixins" tabindex="-1">尽可能使用 mixins <a class="header-anchor" href="#尽可能使用-mixins" aria-hidden="true">#</a></h2><h3 id="为什么-14" tabindex="-1">为什么? <a class="header-anchor" href="#为什么-14" aria-hidden="true">#</a></h3><p>Mixins 封装可重用的代码，避免了重复。如果两个组件共享有相同的功能，则可以使用 mixin。通过 mixin，你可以专注于单个组件的任务和抽象的通用代码。这有助于更好地维护你的应用程序。</p><h3 id="怎么做-13" tabindex="-1">怎么做? <a class="header-anchor" href="#怎么做-13" aria-hidden="true">#</a></h3><p>假设你有一个移动端和桌面端的菜单组件，它们共享一些功能。我们可以抽象出这两个组件的核心功能到一个 mixin 中，例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MenuMixin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      language</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">EN</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">changeLanguage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">language</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DE</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">language</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">EN</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">language</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">EN</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">language</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DE</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> MenuMixin</span></span>
<span class="line"></span></code></pre></div><p>要使用 mixin，只需将其导入到两个组件中（我只展示移动组件）。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mobile</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">changeLanguage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Change language</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> MenuMixin </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./MenuMixin</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">mixins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [MenuMixin]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="#%E7%9B%AE%E5%BD%95">↑ 回到目录</a></p><hr><h3 id="如何提供帮助" tabindex="-1">如何提供帮助？ <a class="header-anchor" href="#如何提供帮助" aria-hidden="true">#</a></h3><p>Fork 和提 PR 以帮助我们改进或者可以给我们提 <a href="https://github.com/pablohpsilva/vuejs-component-style-guide/issues/new" target="_blank" rel="noreferrer">Issue</a>。</p><h2 id="译者" tabindex="-1">译者 <a class="header-anchor" href="#译者" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/xiaofuzi" target="_blank" rel="noreferrer">杨小福</a></li><li><a href="https://github.com/wysxhlyy" target="_blank" rel="noreferrer">机智的马里奥</a></li><li><a href="https://github.com/sqrthree" target="_blank" rel="noreferrer">根号三</a></li></ul>`,164),e=[o];function t(r,c,D,F,y,i){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{C as __pageData,A as default};
