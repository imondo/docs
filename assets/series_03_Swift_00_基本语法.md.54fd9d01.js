import{_ as s,c as a,o as t,a as n}from"./app.e8feb119.js";const D=JSON.parse('{"title":"基本语法","description":"","frontmatter":{},"headers":[],"relativePath":"series/03_Swift/00_基本语法.md","lastUpdated":1670894937000}'),e={name:"series/03_Swift/00_基本语法.md"},o=n(`<h1 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-hidden="true">#</a></h1><p>创建 OXS playground 需要引入 <code>Cocoa</code></p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cocoa</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imondo.cn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>创建 IOS playground 需要引入 <code>UIKit</code></p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UIKit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imondo.cn</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>输出结果</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">imondo.cn</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>以上代码为 <code>Swift</code> 程序的基本结构，接下来说明结构的组成部分。</p><h2 id="swift-引入" tabindex="-1">Swift 引入 <a class="header-anchor" href="#swift-引入" aria-hidden="true">#</a></h2><p>可以使用 <code>import</code> 语句来引入任何的 <code>Objective-C</code> 框架（或 <code>C</code> 库）到 <code>Swift</code> 程序中。例如 <code>import cocoa</code> 语句导入了使用了 <code>Cocoa</code> 库和 <code>API</code>，我们可以在 <code>Swift</code> 程序中使用他们。</p><p><code>Cocoa</code> 本身由 <code>Objective-C</code> 语言写成，<code>Objective-C</code> 又是 <code>C</code> 语言的严格超集，所以在 <code>Swift</code> 应用中我们可以很简单的混入 <code>C</code> 语言代码，甚至是 <code>C++</code> 代码。</p><h2 id="swift-标记" tabindex="-1">Swift 标记 <a class="header-anchor" href="#swift-标记" aria-hidden="true">#</a></h2><p>Swift 程序由多种标记组成，标记可以是单词，标识符，常量，字符串或符号。例如以下 Swift 程序由三种标记组成：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;">// 标记是：单词、符号</span></span>
<span class="line"><span style="color:#A6ACCD;">print</span></span>
<span class="line"><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test!</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-hidden="true">#</a></h2><p>和其他语言一致，单行，多行</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 单行注释</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;">  多行注释</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="分号" tabindex="-1">分号 <a class="header-anchor" href="#分号" aria-hidden="true">#</a></h2><p>与其他语言不同，<code>Swift</code> 不要求在每行语句的结尾使用分号(😉，但是，<strong>当你在同一行写多条语句时，必须用分号隔开</strong>：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Cocoa</span></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imondo.cn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">;</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-hidden="true">#</a></h2><p>标识符就是给变量、常量、方法、函数、枚举、结构体、类、协议等指定的名字。</p><p>构成标识符的字母均有一定的规范，<code>Swift</code> 语言中标识符的命名规则如下：</p><ul><li><p>区分大小写；<code>Myname</code> 与 <code>myname</code> 是两个不同的标识符</p></li><li><p>标识符<strong>首字符</strong>可以以下划线 <code>_</code> 或者字母开始，但<strong>不能是数字</strong></p></li><li><p>标识符中其他字符可以是下划线 <code>_</code> 、字母或数字</p></li></ul><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-hidden="true">#</a></h2><h3 id="与声明有关的关键字" tabindex="-1">与声明有关的关键字 <a class="header-anchor" href="#与声明有关的关键字" aria-hidden="true">#</a></h3><table><thead><tr><th>class</th><th>deinit</th><th>enum</th><th>extension</th></tr></thead><tbody><tr><td>func</td><td>import</td><td>init</td><td>internal</td></tr><tr><td>let</td><td>operator</td><td>private</td><td>protocol</td></tr><tr><td>public</td><td>static</td><td>struct</td><td>subscript</td></tr><tr><td>typealias</td><td>var</td><td></td><td></td></tr></tbody></table><h3 id="与语句有关的关键字" tabindex="-1">与语句有关的关键字 <a class="header-anchor" href="#与语句有关的关键字" aria-hidden="true">#</a></h3><table><thead><tr><th>break</th><th>case</th><th>continue</th><th>default</th></tr></thead><tbody><tr><td>do</td><td>else</td><td>fallthrough</td><td>for</td></tr><tr><td>if</td><td>in</td><td>return</td><td>switch</td></tr><tr><td>where</td><td>while</td><td></td><td></td></tr></tbody></table><h3 id="表达式和类型关键字" tabindex="-1">表达式和类型关键字 <a class="header-anchor" href="#表达式和类型关键字" aria-hidden="true">#</a></h3><table><thead><tr><th>as</th><th>dynamicType</th><th>false</th><th>is</th></tr></thead><tbody><tr><td>nil</td><td>self</td><td>Self</td><td>super</td></tr><tr><td>true</td><td>COLUMN</td><td>FILE</td><td>FUNCTION</td></tr><tr><td>LINE</td><td></td><td></td><td></td></tr></tbody></table><h3 id="在特定上下文中使用的关键字" tabindex="-1">在特定上下文中使用的关键字 <a class="header-anchor" href="#在特定上下文中使用的关键字" aria-hidden="true">#</a></h3><table><thead><tr><th>associativity</th><th>convenience</th><th>dynamic</th><th>didSet</th></tr></thead><tbody><tr><td>final</td><td>get</td><td>infix</td><td>inout</td></tr><tr><td>lazy</td><td>left</td><td>mutating</td><td>none</td></tr><tr><td>nonmutating</td><td>optional</td><td>override</td><td>postfix</td></tr><tr><td>precedence</td><td>prefix</td><td>Protocol</td><td>required</td></tr><tr><td>right</td><td>set</td><td>Type</td><td>unowned</td></tr><tr><td>weak</td><td>willSet</td><td></td><td></td></tr></tbody></table><h2 id="swift-空格" tabindex="-1">Swift 空格 <a class="header-anchor" href="#swift-空格" aria-hidden="true">#</a></h2><p><code>Swift</code> 对空格的使用有一定的要求</p><p>在 <code>Swift</code> 中，运算符不能直接跟在变量或常量的后面。例如下面的代码会报错：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre></div><p>只有这样写才不会报错：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">;  </span><span style="color:#676E95;">// 编码规范推荐使用这种写法</span></span>
<span class="line"><span style="color:#F78C6C;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 这样也可以</span></span>
<span class="line"></span></code></pre></div><h2 id="swift-字面量" tabindex="-1">Swift 字面量 <a class="header-anchor" href="#swift-字面量" aria-hidden="true">#</a></h2><p>所谓字面量，就是指像特定的数字，字符串或者是布尔值这样，能够直接了当地指出自己的类型并为变量进行赋值的值。比如在下面：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;">                 </span><span style="color:#676E95;">// 整型字面量</span></span>
<span class="line"><span style="color:#F78C6C;">3.14159</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;">// 浮点型字面量</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">imondo.cn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;">// 字符串型字面量</span></span>
<span class="line"><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;">// 布尔型字面量</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,42),l=[o];function p(c,d,r,i,y,C){return t(),a("div",null,l)}const F=s(e,[["render",p]]);export{D as __pageData,F as default};
