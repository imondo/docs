import{_ as s,o as a,c as p,O as n}from"./chunks/framework.7fa419f1.js";const o="/docs/imgs/monorepo.png",l="/docs/imgs/mono1.png",A=JSON.parse('{"title":"monorepo 项目管理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/10_TOOLS/11_monorepo.md","filePath":"guide/10_TOOLS/11_monorepo.md","lastUpdated":1686534760000}'),e={name:"guide/10_TOOLS/11_monorepo.md"},t=n(`<h1 id="monorepo-项目管理" tabindex="-1">monorepo 项目管理 <a class="header-anchor" href="#monorepo-项目管理" aria-label="Permalink to &quot;monorepo 项目管理&quot;">​</a></h1><p><code>monorepo</code> 是一种项目架构方式，<strong>一个仓库内包含多个开发项目（模块，包）</strong>，里面的模块可以单独发布。</p><h2 id="新建" tabindex="-1">新建 <a class="header-anchor" href="#新建" aria-label="Permalink to &quot;新建&quot;">​</a></h2><p>项目根目录下新建 <code>pnpm-workspace.yaml</code> 配置文件</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">packages</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># packages 目录 创建不同的子项目</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">packages/**</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 不包括在 test 文件夹下的 package</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">!**/test/**</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>在 packages 创建几个项目文件夹</p><p><img src="`+o+'" alt="monorepo.png"></p><h2 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h2><p>全局安装 <code>pnpm</code> 依赖</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span></span></code></pre></div><p>安装项目公共开发依赖 <code>typeScript</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typescript</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span></code></pre></div><h2 id="局部依赖安装" tabindex="-1">局部依赖安装 <a class="header-anchor" href="#局部依赖安装" aria-label="Permalink to &quot;局部依赖安装&quot;">​</a></h2><p>可以 cd 进入子目录安装</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vite</span></span></code></pre></div><p>也根据 <code>pnpm</code> 文档提供根目录执行命令，需要先到指定子目录 <code>app1</code> 进行初始化</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span></code></pre></div><p>子目录命令通用为 <code>命名空间 + 项目名</code>，这里名称为 <code>@monorepo-test/app1</code>，必须命令，不然 <code>pnpm add -filter</code> 的时候找不到添加包的项目目录</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fd-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--filter</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@monorepo-test/app1</span></span></code></pre></div><h2 id="项目内依赖安装" tabindex="-1">项目内依赖安装 <a class="header-anchor" href="#项目内依赖安装" aria-label="Permalink to &quot;项目内依赖安装&quot;">​</a></h2><p><code>app1</code> 需要依赖 <code>utils</code> 功能，为了让依赖实时更新最新版本，才用通配符更新版本</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@monorepo-test/utils@</span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--filter</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@monorepo-test/app1</span></span></code></pre></div><p><img src="'+l+`" alt="mono1.png"></p><h2 id="常用-monorepo-pnpm-命令" tabindex="-1">常用 monorepo pnpm 命令 <a class="header-anchor" href="#常用-monorepo-pnpm-命令" aria-label="Permalink to &quot;常用 monorepo pnpm 命令&quot;">​</a></h2><p>列出包源码位置，被内部哪些项目引用</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">why</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span></code></pre></div><p>取消依赖安装</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remove</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remove</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--filter</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">@monorepo-test/app1</span></span></code></pre></div><p>本地 link 文件</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">link</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">link</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pk</span><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,30),c=[t];function r(i,C,y,d,D,m){return a(),p("div",null,c)}const g=s(e,[["render",r]]);export{A as __pageData,g as default};
