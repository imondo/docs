import{_ as s,c as n,o as a,a as l}from"./app.90b3aaf2.js";const C=JSON.parse('{"title":"微信小程序优化思路","description":"","frontmatter":{},"headers":[],"relativePath":"guide/04_FRONTEND/03_微信端/04_小程序优化.md","lastUpdated":1670824057000}'),p={name:"guide/04_FRONTEND/03_微信端/04_小程序优化.md"},o=l(`<h1 id="微信小程序优化思路" tabindex="-1">微信小程序优化思路 <a class="header-anchor" href="#微信小程序优化思路" aria-hidden="true">#</a></h1><p>这里的小程序特指<strong>微信小程序</strong></p><h2 id="指标" tabindex="-1">指标 <a class="header-anchor" href="#指标" aria-hidden="true">#</a></h2><ul><li>FCP：白屏加载结束；</li><li>FMP：首屏渲染完成；</li><li>TTI：所有内容加载完成；</li></ul><h3 id="官方性能指标" tabindex="-1">官方性能指标 <a class="header-anchor" href="#官方性能指标" aria-hidden="true">#</a></h3><p>主要围绕 <strong>渲染表现</strong>、<strong>setData 数据量</strong>、<strong>元素节点数</strong> 和 <strong>网络请求延时</strong> 这几个维度来给予定义；</p><ul><li>首屏时间不超过 5 秒；</li><li>渲染时间不超过 500ms；</li><li>每秒调用 <code>setData</code> 的次数不超过 20 次；</li><li><code>setData</code> 的数据在 <code>JSON.stringify</code> 后不超过 256kb；</li><li>页面 WXML 节点少于 1000 个，节点树深度少于 30 层，子节点数不大于 60 个；</li><li>所有网络请求都在 1 秒内返回结果；</li></ul><blockquote><p>微信小程序性能<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/audits/performance.html" target="_blank" rel="noreferrer">指标详解</a></p></blockquote><h3 id="性能分析工具" tabindex="-1">性能分析工具 <a class="header-anchor" href="#性能分析工具" aria-hidden="true">#</a></h3><ul><li>体验<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/audits/audits.html" target="_blank" rel="noreferrer">评分工具</a></li><li>小程序<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/performanceReport/" target="_blank" rel="noreferrer">测速系统</a></li><li>小程序管理平台</li><li>小程序助手</li></ul><h2 id="小程序底层架构" tabindex="-1">小程序底层架构 <a class="header-anchor" href="#小程序底层架构" aria-hidden="true">#</a></h2><p>不同于传统浏览器<strong>单线程</strong>，小程序采用<strong>双线程模型。</strong></p><ul><li>视图层：Webview 线程，启用不同 webview 来渲染不同的小程序页面</li><li>逻辑层：单独的线程执行 JS 代码，可以控制视图层的逻辑</li></ul><p><strong>优势：<strong>不会经常出现</strong>阻塞</strong>情况</p><p><strong>任何线程间的数据传输都是有延时的</strong>，意味着逻辑层和视图层间通信是<strong>异步行为</strong> **</p><h2 id="启动慢" tabindex="-1">启动慢 <a class="header-anchor" href="#启动慢" aria-hidden="true">#</a></h2><p><strong>启动过程：</strong></p><ul><li>准备运行环境：启动双线程环境，并在线程中完成小程序基础库的初始化和预执行</li><li>下载小程序代码包：下载编译后的代码包到本地，有缓存优先读取缓存</li><li>加载小程序代码包：基础库会完成所有页面的注册</li><li>初始化小程序首页</li></ul><p><strong>优化：</strong></p><ul><li>无用文件，函数，样式剔除</li><li>减少代码包中静态资源文件：图片启用CDN</li><li>逻辑后移，精简前端逻辑：不涉及前端计算展示类逻辑，都可后移</li><li>复用模板插件</li><li>分包加载</li><li>部分页面 H5 化</li></ul><h2 id="白屏时间长" tabindex="-1">白屏时间长 <a class="header-anchor" href="#白屏时间长" aria-hidden="true">#</a></h2><p><strong>影响因数：</strong></p><ul><li>网络资源加载时间</li><li>渲染时间</li></ul><p><strong>优化</strong>：</p><ul><li>启用本地缓存</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/pre-fetch.html" target="_blank" rel="noreferrer">数据预拉取</a></li><li>跳转时预拉取</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html" target="_blank" rel="noreferrer">分包预下载</a></li><li>非关键渲染数据延迟请求</li><li>分屏渲染</li><li>接口聚合，请求合并</li><li>骨架屏</li><li>图片资源优化 <ul><li>使用 WebP 格式</li><li>图片裁剪&amp;降质</li><li>图片懒加载，雪碧图优化</li><li>降级加载大图资源：我们可以先呈现高度压缩的模糊图片，同时利用一个隐藏的  节点来加载原图，待原图加载完成后再转移到真实节点上渲染</li></ul></li></ul><p>注意，具有 display: none 样式的  标签只会加载图片资源，但不渲染。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;"> banner</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">wxml </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">image</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{url}}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;"> 图片加载器 </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">image</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width:0;height:0;display:none</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{{preloadUrl}}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">bindload</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onImgLoad</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">binderror</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onErrorLoad</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// banner.js</span></span>
<span class="line"><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ready</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">originUrl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://path/to/picture</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">  </span><span style="color:#676E95;">// 图片源地址</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      url</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">compress</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">originUrl</span><span style="color:#F07178;">)             </span><span style="color:#676E95;">// 加载压缩降质的图片</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">preloadUrl</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">originUrl</span><span style="color:#F07178;">                </span><span style="color:#676E95;">// 预加载原图</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">onImgLoad</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        url</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">originUrl</span><span style="color:#F07178;">                       </span><span style="color:#676E95;">// 加载原图</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="渲染性能" tabindex="-1">渲染性能 <a class="header-anchor" href="#渲染性能" aria-hidden="true">#</a></h2><p><strong>跳转页面过程：</strong></p><ul><li>准备新的 webview 线程环境，包括基础库的初始化；</li><li>从逻辑层到视图层的初始数据通信；</li><li>视图层根据逻辑层的数据，结合 WXML 片段构建出节点树（包括节点属性、事件绑定等信息），最终与 WXSS 结合完成页面渲染；</li></ul><p>由于微信会提前开始准备 webview 线程环境，所以小程序的渲染损耗主要在后两者 数据通信 和 节点树创建/更新 的流程中。相对应的，比较有效的渲染性能优化方向就是：</p><ul><li>降低线程间通信频次</li><li>减少线程间通信的数据量</li><li>减少 WXML 节点数量</li></ul><p><strong>优化</strong>：</p><ul><li>合并 <code>setData</code>  调用</li><li>只把渲染相关的数据放在 <code>data</code>  中</li><li>应用层的数据 diff</li><li>组件层的 diff</li><li>去掉不必要的事件绑定</li><li>去掉不必要的节点属性</li><li>适当的组件颗粒度</li><li>事件总线，替代组件间数据绑定的通信方式：eventBus</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 全局事件调度</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EventBus</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">events</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">on</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">events</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">trigger</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">events</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">remove</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> event </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventBus</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 事件订阅者　子组件</span></span>
<span class="line"><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data-ready</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">//　事件发布着　Parent</span></span>
<span class="line"><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ready</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trigger</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data-ready</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="内存高" tabindex="-1">内存高 <a class="header-anchor" href="#内存高" aria-hidden="true">#</a></h2><p><strong>当小程序占用系统资源过高，就有可能会被系统销毁或被微信客户端主动回收</strong> **</p><ul><li>内存预警：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/performance/wx.onMemoryWarning.html" target="_blank" rel="noreferrer">wx.onMemoryWarning</a></li><li>回收后台页面计时器：在页面 <strong>onHide</strong> 的时候手动把定时器清理掉，有必要时再在 <strong>onShow</strong> 阶段恢复定时器</li><li>避免频发事件中的重度内存操作 <ul><li><code>onPageScroll</code> 事件回调使用节流</li><li>避免 <code>CPU</code> 密集型操作，譬如复杂的计算</li><li>避免调用 <code>setData</code>，或减小 <code>setData</code> 的数据量</li><li>尽量使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/IntersectionObserver.html" target="_blank" rel="noreferrer">IntersectionObserver</a> 来替代 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.html" target="_blank" rel="noreferrer">SelectorQuery</a>，前者对性能影响更小</li></ul></li><li>大图，长列表优化：<a href="https://developers.weixin.qq.com/miniprogram/dev/extended/functional/recycle-view.html" target="_blank" rel="noreferrer">长列表组件</a></li></ul><p><strong>参考：</strong></p><ul><li><a href="https://juejin.im/post/5e7d4487e51d4546d83af560?utm_source=gold_browser_extension" target="_blank" rel="noreferrer">京喜小程序的高性能打造之路</a></li><li><a href="https://mp.weixin.qq.com/s/_NSJTQ-4-8gTnwTVK-tn0A" target="_blank" rel="noreferrer">小程序工程化探索</a></li></ul>`,41),e=[o];function r(t,c,i,F,y,D){return a(),n("div",null,e)}const d=s(p,[["render",r]]);export{C as __pageData,d as default};
