import{_ as e,c as r,o as a,a as t}from"./app.90b3aaf2.js";const u=JSON.parse('{"title":"2019我的入坑与填坑之旅","description":"","frontmatter":{},"headers":[],"relativePath":"guide/07_PROGRAM/04_2019年总结.md","lastUpdated":1670824057000}'),p={name:"guide/07_PROGRAM/04_2019年总结.md"},o=t('<h1 id="_2019我的入坑与填坑之旅" tabindex="-1">2019我的入坑与填坑之旅 <a class="header-anchor" href="#_2019我的入坑与填坑之旅" aria-hidden="true">#</a></h1><p><img src="https://s2.ax1x.com/2019/12/24/l9bzRI.png" alt=""></p><p>2019年是平平淡淡的一年，做为代码仔的我一直沉浸在无穷无尽的业务与需求当中，上半年做管理系统，下半年做小程序。唯一让我觉得做了点事的就是为公司输出了这两者的统一前端项目结构（都不能称之为架构）。</p><h2 id="上半年" tabindex="-1">上半年 <a class="header-anchor" href="#上半年" aria-hidden="true">#</a></h2><p>犹记得2018年年末为了赶项目而天天加班，为此老婆大人都有了意见；为了家庭和谐，19年年初上班时就想梳理下整个公司的前端项目结构，到底我们需要什么结构，怎么快速开发，怎么登录，怎么鉴权，怎么部署。</p><p>项目任务不怎么紧急的时间里，整理了一套<a href="https://github.com/imondo/vue-template" target="_blank" rel="noreferrer">开发模板</a>。也在掘金上输出了几篇项目总结：</p><ul><li><a href="https://juejin.im/post/5cedfea96fb9a07ef06f761e" target="_blank" rel="noreferrer">后台管理项目总结</a></li><li><a href="https://juejin.im/post/5d155e99e51d455071250b50#heading-6" target="_blank" rel="noreferrer">基于饿了么组件封装</a></li><li><a href="https://juejin.im/post/5cf7807d51882519371f2467" target="_blank" rel="noreferrer">webpack常规打包优化方案</a></li><li><a href="https://juejin.im/post/5ce3c9fce51d454d56535754" target="_blank" rel="noreferrer">组件通信处理方案</a></li><li><a href="https://juejin.im/post/5cf0800b6fb9a07ee85c0f89" target="_blank" rel="noreferrer">项目部署</a></li></ul><h2 id="下半年" tabindex="-1">下半年 <a class="header-anchor" href="#下半年" aria-hidden="true">#</a></h2><p>每年的7，8月都是开发小程序，我也戏称这是小程序月，没想到公司需求一直到年底才算完结，一下做了4个小程序。</p><p>接触小程序也是在18年，从最初的没朋友<a href="http://mpvue.com/" target="_blank" rel="noreferrer">mpvue</a>，到<a href="https://taro.jd.com/" target="_blank" rel="noreferrer">taro</a>，再到<a href="https://uniapp.dcloud.io/" target="_blank" rel="noreferrer">uni-app</a>，再到原生小程序，期间也做了很多的对比。</p><p>多端框架的兴起，方便了我们的开发，不用做很多无用的维护，但也同时加重的对各端BUG的处理。上面各端自己全部都开发过一遍，同时也在公司实际运用。</p><ul><li>taro</li></ul><p>在公司其中一个项目选用taro是因为公司产品有实际场景，有各端的需要，而且也是我想试用<code>typescript</code>，想在后面项目中加入<code>typescript</code>来约束项目。</p><ul><li>uni-app</li></ul><p><code>uni-app</code>是基于<code>vue</code>语法开发，而刚好公司的主要技术栈是<code>vue</code>，但是这个我并没有在公司项目运用，而只是在自己小项目中使用，不过它的开发效率和运行速度确实比<code>taro</code>要好一点。</p><ul><li>原生开发</li></ul><p>其实开发了那么多，货比三家，还是要对项目场景做一个大致的调研。如果项目确实只在微信端运行，我觉得没有必要使用这些多端(一家之言)。比如<code>taro</code>如果引用了微信端<code>echarts</code>，则只能编译成微信小程序，这让我感到使用多端完全多此一举；而我们选择多端开发大部分是觉得原生开发对项目的管理，组件的管理，样式的编译总总有开倒车的嫌疑。</p><p>考虑到这些，我完成公司后两个项目，自己输出了一套小程序的<a href="https://github.com/imondo/mini-apps" target="_blank" rel="noreferrer">通用模板</a>。</p><ul><li>加入预编译任务</li><li>引用<a href="https://youzan.github.io/vant-weapp/#/intro" target="_blank" rel="noreferrer">vant-weapp</a></li></ul><p>说起来开发小程序，还让我战战兢兢开始提交了首个<code>pr</code>，并且也成功了。</p><p><img src="https://s2.ax1x.com/2020/01/04/ldOzPe.png" alt="pr.png"></p><p>说起来也是让人蛮开心的，让我更想参与到开源项目当中。</p><h2 id="一些罗里吧嗦" tabindex="-1">一些罗里吧嗦 <a class="header-anchor" href="#一些罗里吧嗦" aria-hidden="true">#</a></h2><p>做为一名大龄开发人员，随着年龄的增长，不可避免有一种焦虑感，而作为一名前端开发而言，更是如此，不同于后端人员，前端的存在在很多公司都是可有可无的，还是以过去的眼观来看待前端，而随着项目的扩大，技术的更新，前端不仅仅如此而已，但想要改变他们的看法也不是一朝一夕，只能对自己严格要求，加深自己技术的深度与广度，来推动与主导项目。</p>',24),i=[o];function n(l,d,c,h,s,_){return a(),r("div",null,i)}const m=e(p,[["render",n]]);export{u as __pageData,m as default};
