import{_ as i,c as l,o as e,a}from"./app.c1f8735d.js";const f=JSON.parse('{"title":"设计原则","description":"","frontmatter":{},"headers":[],"relativePath":"series/04_DesignMode/00_设计原则.md","lastUpdated":1675251687000}'),t={name:"series/04_DesignMode/00_设计原则.md"},n=a('<h1 id="设计原则" tabindex="-1">设计原则 <a class="header-anchor" href="#设计原则" aria-hidden="true">#</a></h1><h2 id="原则" tabindex="-1">原则 <a class="header-anchor" href="#原则" aria-hidden="true">#</a></h2><p>设计模式的其实就是拿来主义，套公示，一般需要遵循 SOLID 规则：</p><ul><li>单一功能原则 （Single Responsibility Principle)</li><li>开发封闭原则 （Opened Closed Principle）</li><li>里式替换原则（Liskov Substitution Principle）</li><li>接口隔离原则（Interface Segregation Principle）</li><li>依赖反转原则（Dependency inversion Principle）</li></ul><p>其实主要是围绕单一原则和开放封闭原则展开</p><h2 id="_23-种设计模式" tabindex="-1">23 种设计模式 <a class="header-anchor" href="#_23-种设计模式" aria-hidden="true">#</a></h2><ul><li>单例模式</li><li>原型模式</li><li>构造器模式</li><li>工厂模式</li><li>抽象工厂模式</li><li>桥接模式</li><li>外观模式</li><li>组合模式</li><li>装饰器模式</li><li>适配器模式</li><li>代理模式</li><li>亨元模式</li><li>迭代器模式</li><li>解释器模式</li><li>观察者模式</li><li>中介者模式</li><li>访问者模式</li><li>状态模式</li><li>备忘录模式</li><li>策略模式</li><li>模板方法模式</li><li>职责链模式</li><li>命令模式</li></ul>',7),r=[n];function s(_,d,o,c,p,h){return e(),l("div",null,r)}const S=i(t,[["render",s]]);export{f as __pageData,S as default};
