(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{231:function(n,t,e){"use strict";e.r(t);var a=e(0),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"【vue项目总结】组件通信处理方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#【vue项目总结】组件通信处理方案"}},[n._v("#")]),n._v(" 【Vue项目总结】组件通信处理方案")]),n._v(" "),e("p",[n._v("Vue组件之间的通信是我们在项目中常常碰到的，而选择合适的通信方式尤为重要，这里总结下作者在实际项目中所运用到的通信方案，如有遗漏，请大家见谅。文章代码具体见"),e("a",{attrs:{href:"https://github.com/one-pupil/study/tree/master/vue-cli3/vue-project-article",target:"_blank",rel:"noopener noreferrer"}},[n._v("DEMO"),e("OutboundLink")],1),n._v("；文章首发于"),e("a",{attrs:{href:"https://imondo.cn/blog/article/45",target:"_blank",rel:"noopener noreferrer"}},[n._v("imondo.cn"),e("OutboundLink")],1)]),n._v(" "),e("h2",{attrs:{id:"父子组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父子组件"}},[n._v("#")]),n._v(" 父子组件")]),n._v(" "),e("p",[n._v("Vue中常见的是"),e("strong",[n._v("父与子")]),n._v("组件间的通信，所要用到的关键字段是"),e("code",[n._v("props")]),n._v("和"),e("code",[n._v("$emit")]),n._v("。")]),n._v(" "),e("p",[e("code",[n._v("props")]),n._v("接受父组件传给子组件信息的字段，它的类型："),e("code",[n._v("Array<string> | Object")]),n._v(";详细解释可以参考"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/api/#props",target:"_blank",rel:"noopener noreferrer"}},[n._v("文档"),e("OutboundLink")],1)]),n._v(" "),e("p",[e("code",[n._v("$emit")]),n._v("由子组件触发事件向上传播给父级消息。")]),n._v(" "),e("p",[n._v("示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// Parent\n\n<template>\n  <div class="parent">\n    我是父组件\n    <p>来自子级的回答：{{ childMsg }}</p>\n    <Child :msg="msg" @click="handleClick"/>\n  </div>\n</template>\n<script>\nimport Child from "./Child";\nexport default {\n  name: "Parent",\n  components: {\n    Child\n  },\n  data() {\n    return {\n      msg: "叫你吃饭了",\n      childMsg: \'\'\n    };\n  },\n  methods: {\n    // 接收来自子级的事件消息\n    handleClick(val) {\n      this.childMsg = val;\n    } \n  }\n};\n<\/script>\n\n// Child\n<template>\n  <div class="child">\n    <p>我是子组件</p>\n    <p>父级来的信息： {{ msg }}</p>\n    <button @click="handleClick">回答父级</button>\n  </div>\n</template>\n<script>\nexport default {\n  name: "Child",\n  // 接收父级传来的信息\n  props: {\n    msg: String\n  },\n  methods: {\n    // 向父级传播事件消息\n    handleClick() {\n      this.$emit(\'click\', \'我知道了\');\n    }\n  },\n};\n<\/script>\n\n')])])]),e("p",[n._v("效果如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b077d0b3dfd9ad?w=584&h=280&f=gif&s=18034",alt:""}})]),n._v(" "),e("h2",{attrs:{id:"祖孙组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#祖孙组件"}},[n._v("#")]),n._v(" 祖孙组件")]),n._v(" "),e("p",[n._v("有时候我们可能会碰到组件间的无限嵌套，这时我们使用"),e("code",[n._v("props")]),n._v("时无法向下无限极传递数据的，我们可以用到"),e("code",[n._v("provide/inject")]),n._v("；"),e("code",[n._v("provide")]),n._v("可以向其子孙组件传递数据，而不关子孙组件的层级有多深，使用"),e("code",[n._v("inject")]),n._v("都可以拿到数据。详细解释可以参考"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/api/#provide-inject",target:"_blank",rel:"noopener noreferrer"}},[n._v("文档"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// Grand\n<template>\n  <div class="grand">\n    <p>我是祖父</p>\n    <Parent />\n  </div>\n</template>\n\n<script>\nexport default {\n  name: "Grand",\n  provide: {\n    grandMsg: \'都来吃饭\'\n  },\n  components: {\n    Parent\n  }\n};\n<\/script>\n\n// Parent\n<template>\n  <div class="parent">\n    我是父组件\n    <p>祖父的信息：{{ grandMsg }}</p>\n    <Child />\n  </div>\n</template>\n<script>\nimport Child from "./Child";\nexport default {\n  name: "Parent",\n  components: {\n    Child\n  },\n  inject: {\n    grandMsg: {\n      default: \'\'\n    }\n  }\n};\n\n// Child\n<template>\n  <div class="child">\n    <p>我是子组件</p>\n    <p>爷爷的信息： {{ grandMsg }}</p>\n  </div>\n</template>\n<script>\nexport default {\n  name: "Child",\n  inject: {\n    grandMsg: {\n      default: \'\'\n    }\n  }\n};\n<\/script>\n')])])]),e("p",[n._v("效果如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b077d5179bd0c6?w=337&h=269&f=png&s=6247",alt:""}})]),n._v(" "),e("blockquote",[e("p",[e("code",[n._v("provide")]),n._v(" 和 "),e("code",[n._v("inject")]),n._v(" 绑定并不是可响应的。我们可以通过传递祖父级的实例"),e("code",[n._v("this")]),n._v("或着使用"),e("code",[n._v("observable")]),n._v("来使传递的数据是响应的。")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// Grand\n<template>\n  <div class="grand">\n    <p>我是祖父</p>\n    <input type="text" v-model="msg" placeholder="输入祖父的消息"/>\n    <Parent />\n  </div>\n</template>\n<script>\nimport Parent from "./Parent";\nexport default {\n  name: "Grand",\n  provide() {\n    return { // 利用函数 provide 返回对象\n      grandVm: this // 传递实例\n    };\n  },\n  ...\n  data() {\n    return {\n      msg: ""\n    };\n  }\n};\n<\/script>\n\n// Child\n<template>\n  <div class="child">\n    <p>我是子组件</p>\n    <p>爷爷的实例信息： {{ grandVmMsg }}</p>\n  </div>\n</template>\n<script>\nexport default {\n  name: "Child",\n  inject: {\n    grandVm: {\n      default: () => {\n        "";\n      }\n    }\n  },\n  computed: {\n    grandVmMsg() {\n      return this.grandVm.msg;\n    }\n  }\n};\n<\/script>\n\n')])])]),e("p",[n._v("效果如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b077d7f1b11fca?w=584&h=280&f=gif&s=60112",alt:""}})]),n._v(" "),e("p",[n._v("使用"),e("code",[n._v("observable")]),n._v("让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。")]),n._v(" "),e("p",[n._v("示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// Grand\nprovide() {\n  this.read = Vue.observable({\n    msg: ''\n  })\n  return {\n    read: this.read\n  };\n}\n")])])]),e("p",[n._v("效果如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b079a96fe5b546?w=584&h=280&f=gif&s=52844",alt:""}})]),n._v(" "),e("h2",{attrs:{id:"兄弟组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#兄弟组件"}},[n._v("#")]),n._v(" 兄弟组件")]),n._v(" "),e("p",[n._v("同级别组件相互间的通信，我们可以使用"),e("code",[n._v("EventBus")]),n._v("或着"),e("code",[n._v("Vuex")]),n._v("。")]),n._v(" "),e("p",[n._v("简单的"),e("code",[n._v("EventBus")]),n._v("示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// Bus.js\nimport Vue from "vue";\nexport default new Vue();\n\n// Child\n<div class="child">\n  <p>我是子组件一</p>\n  <button @click="handleClick">组件一事件</button>\n</div>\n<script>\nimport Bus from "./Bus";\nexport default {\n  name: "Child",\n  methods: {\n    handleClick() {\n      Bus.$emit("click", "嘿，老铁");\n    }\n  }\n};\n<\/script>\n\n// ChildOne\n<div class="child">\n  <p>我是子组件二</p>\n  <p>兄弟叫我：{{ msg }}</p>\n</div>\n<script>\nimport Bus from "./Bus";\nexport default {\n  name: "ChildOne",\n  data() {\n    return {\n      msg: ""\n    };\n  },\n  mounted() {\n    Bus.$on("click", msg => {\n      this.msg = msg;\n    });\n  }\n};\n<\/script>\n')])])]),e("p",[n._v("效果如下：\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b079a19cc05764?w=535&h=219&f=gif&s=22788",alt:""}})]),n._v(" "),e("h2",{attrs:{id:"v-model与sync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model与sync"}},[n._v("#")]),n._v(" "),e("code",[n._v("v-model")]),n._v("与"),e("code",[n._v("sync")])]),n._v(" "),e("p",[e("code",[n._v("v-model")]),n._v("是我们用"),e("code",[n._v("ElementUI")]),n._v("常见的表单绑定值方式；可以直接修改子组件修改父组件传入的值，简化了我们组件通信的逻辑。")]),n._v(" "),e("p",[n._v("示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// ModelCom\n<div class="child">\n  <input type="text" @input="handleInput">\n</div>\n<script>\nexport default {\n  name: "ModelSync",\n  methods: {\n    // 通过绑定表单input中的input事件，向上触发input事件来修改值\n    handleInput(e) {\n      const value = e.target.value;\n      this.$emit(\'input\', value);\n    }\n  }\n};\n<\/script>\n\n// Home\n<ModelSync v-model="msg"/>\n')])])]),e("p",[n._v("效果如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b07fdd91ed1601?w=506&h=127&f=gif&s=73123",alt:""}})]),n._v(" "),e("p",[e("code",[n._v("sync")]),n._v("修饰符也可以是我们的"),e("code",[n._v("prop")]),n._v("进行"),e("strong",[n._v("双向绑定")]),n._v("。")]),n._v(" "),e("p",[n._v("它需要我们在子组件内触发"),e("code",[n._v("this.$emit('update:prop', val)")]),n._v("事件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// ModelCom\n<input type="text" @input="handleChange">\n...\nprops: [\'value\'],\nmethods: {\n  handleChange(e) {\n    const value = e.target.value;\n    // 触发更新\n    this.$emit(\'update:value\', value);\n  }\n}\n\n// Home\n<ModelSync :value.sync="syncMsg"/>\n')])])]),e("p",[n._v("效果如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b07fdf45142dbe?w=506&h=127&f=gif&s=53259",alt:""}})]),n._v(" "),e("h2",{attrs:{id:"children与-parent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#children与-parent"}},[n._v("#")]),n._v(" "),e("code",[n._v("$children")]),n._v("与"),e("code",[n._v("$parent")])]),n._v(" "),e("p",[n._v("我们可以在组件中通过当前的实例对象访问到组件的"),e("code",[n._v("$children")]),n._v("和"),e("code",[n._v("$parent")]),n._v("来找到各自组件的父级组件或子级组件实例。")]),n._v(" "),e("p",[n._v("示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// Child\n<div class="child">\n  <p>我是子组件</p>\n  <p>来自父组件的msg: {{ msg }}</p>\n</div>\n...\n<script>\nexport default {\n  name: "ChildParent",\n  data() {\n    return {\n      value: \'\'\n    }\n  },\n  computed: {\n    msg() {\n      return this.$parent.value;\n    }\n  },\n  created() {\n    console.log(this.$parent); \n  }\n}\n\n// Parent\n<input v-model="value" />\n\n')])])]),e("p",[n._v("通过在父组件中输入值可以看到子组件数据也同时更新了")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b082eae86b73b4?w=506&h=138&f=gif&s=75527",alt:""}})]),n._v(" "),e("h2",{attrs:{id:"attrs与-listeners"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attrs与-listeners"}},[n._v("#")]),n._v(" "),e("code",[n._v("$attrs")]),n._v("与"),e("code",[n._v("$listeners")])]),n._v(" "),e("p",[e("code",[n._v("$attrs")]),n._v("可以通过 "),e("code",[n._v('v-bind="$attrs"')]),n._v(" 将组件上的特性都（class 和 style 除外）传入内部组件；传入的值与"),e("code",[n._v("inheritAttrs")]),n._v("的设置有关，通常封装高级组件。")]),n._v(" "),e("p",[n._v("当我们"),e("code",[n._v("inheritAttrs")]),n._v(" 设置 "),e("code",[n._v("true")]),n._v("；组件渲染DOM时写在组件的特性会渲染上去；")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b08497b75b7ec1?w=1253&h=607&f=png&s=41392",alt:""}})]),n._v(" "),e("p",[e("code",[n._v("$listeners")]),n._v('包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on="$listeners" 传入内部组件。')]),n._v(" "),e("p",[n._v("具体详细可见"),e("a",{attrs:{href:"https://cn.vuejs.org/v2/api/?#vm-attrs",target:"_blank",rel:"noopener noreferrer"}},[n._v("文档"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// Attr\n<div class="child">\n  <p>Attr</p>\n  <p>这是$attrs：{{ placeholder }}</p>\n  <p>这是$listeners：{{ test }}</p>\n  <button @click="$listeners.click">监听了$listeners</button>\n</div>\n...\n<script>\nexport default {\n  name: "AttrListen",\n  inheritAttrs: true,\n  props: {\n    test: {\n      type: String,\n      default: \'\'\n    }\n  },\n  data() {\n    return {\n      placeholder: this.$attrs.placeholder\n    }\n  }\n};\n<\/script>\n\n// Home\n<AttrListen placeholder="这是个attr" :test="value" v-bind="$attrs" v-on="$listeners" @click="handleListen"/>\n\n')])])]),e("p",[n._v("效果如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/30/16b084a69857c46f?w=506&h=178&f=gif&s=16686",alt:""}})]),n._v(" "),e("h2",{attrs:{id:"通过封装查找组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过封装查找组件"}},[n._v("#")]),n._v(" 通过封装查找组件")]),n._v(" "),e("blockquote",[e("p",[n._v("通过封装函数来向上或向下派发事件")])]),n._v(" "),e("p",[n._v("参考见"),e("a",{attrs:{href:"https://github.com/icarusion/vue-component-book/blob/master/src/mixins/emitter.js",target:"_blank",rel:"noopener noreferrer"}},[n._v("Vue.js组件精讲"),e("OutboundLink")],1)]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// emitter.js\nfunction broadcast(componentName, eventName, params) {\n    this.$children.forEach(child => {\n        const name = child.$options.name;\n\n        if (name === componentName) {\n            child.$emit.apply(child, [eventName].concat(params));\n        } else {\n            broadcast.apply(child, [componentName, eventName].concat([params]));\n        }\n    });\n}\nexport default {\n    methods: {\n        dispatch(componentName, eventName, params) {\n            let parent = this.$parent || this.$root;\n            let name = parent.$options.name;\n\n            while (parent && (!name || name !== componentName)) {\n                parent = parent.$parent;\n\n                if (parent) {\n                    name = parent.$options.name;\n                }\n            }\n            if (parent) {\n                parent.$emit.apply(parent, [eventName].concat(params));\n            }\n        },\n        broadcast(componentName, eventName, params) {\n            broadcast.call(this, componentName, eventName, params);\n        }\n    }\n};\n\n")])])]),e("blockquote",[e("p",[n._v("通过封装函数来查找指定任意组件")])]),n._v(" "),e("p",[n._v("参考见"),e("a",{attrs:{href:"https://github.com/icarusion/vue-component-book/blob/master/src/utils/assist.js",target:"_blank",rel:"noopener noreferrer"}},[n._v("Vue.js组件精讲"),e("OutboundLink")],1)]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 由一个组件，向上找到最近的指定组件\nfunction findComponentUpward (context, componentName) {\n    let parent = context.$parent;\n    let name = parent.$options.name;\n\n    while (parent && (!name || [componentName].indexOf(name) < 0)) {\n        parent = parent.$parent;\n        if (parent) name = parent.$options.name;\n    }\n    return parent;\n}\nexport { findComponentUpward };\n\n// 由一个组件，向上找到所有的指定组件\nfunction findComponentsUpward (context, componentName) {\n    let parents = [];\n    const parent = context.$parent;\n\n    if (parent) {\n        if (parent.$options.name === componentName) parents.push(parent);\n        return parents.concat(findComponentsUpward(parent, componentName));\n    } else {\n        return [];\n    }\n}\nexport { findComponentsUpward };\n\n// 由一个组件，向下找到所有指定的组件\nfunction findComponentsDownward (context, componentName) {\n    return context.$children.reduce((components, child) => {\n        if (child.$options.name === componentName) components.push(child);\n        const foundChilds = findComponentsDownward(child, componentName);\n        return components.concat(foundChilds);\n    }, []);\n}\nexport { findComponentsDownward };\n\n// 由一个组件，找到指定组件的兄弟组件\nfunction findBrothersComponents (context, componentName, exceptMe = true) {\n    let res = context.$parent.$children.filter(item => {\n        return item.$options.name === componentName;\n    });\n    let index = res.findIndex(item => item._uid === context._uid);\n    if (exceptMe) res.splice(index, 1);\n    return res;\n}\nexport { findBrothersComponents };\n")])])]),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("p",[n._v("项目中组件的通信方式大概常用的是上面几种方案，我们可以通过不同的方式来实现组件通信，但是选择合适组件通信方式可以使我们事半功倍。写的不当之处，望指正~")])])}),[],!1,null,null,null);t.default=r.exports}}]);