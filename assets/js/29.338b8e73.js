(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{245:function(e,t,n){"use strict";n.r(t);var s=n(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"小程序的初次遇见-使用mpvue搭建模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小程序的初次遇见-使用mpvue搭建模板"}},[e._v("#")]),e._v(" 小程序的初次遇见,使用mpvue搭建模板")]),e._v(" "),n("p",[e._v("由于公司业务需求的需要，在这一周需要开发小程序，加急看了下小程序的文档，发现用其原生来编写程序不是很顺手，公司前端用的技术栈是"),n("code",[e._v("vue")]),e._v("， 询问了谷哥和度娘发现大部分推荐了 "),n("code",[e._v("wepy")]),e._v("和 "),n("code",[e._v("mpvue")]),e._v("，对比了两个框架，还是选用了 "),n("a",{attrs:{href:"http://mpvue.com/mpvue/#_1?_blank",target:"_blank",rel:"noopener noreferrer"}},[e._v("mpvue"),n("OutboundLink")],1),e._v(", 因为 "),n("code",[e._v("mpvue")]),e._v(" 继承自 "),n("code",[e._v("vue.js")]),e._v("，其技术规范和语法特点与 "),n("em",[n("strong",[e._v("Vue.js")])]),e._v(" 保持一致。")]),e._v(" "),n("h2",{attrs:{id:"快速搭建-mpvue-目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速搭建-mpvue-目录"}},[e._v("#")]),e._v(" 快速搭建 "),n("em",[n("strong",[e._v("mpvue")])]),e._v(" 目录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 全局安装 vue-cli\n$ npm install --global vue-cli\n// 创建一个基于 mpvue-quickstart 模板的新项目\n$ vue init mpvue/mpvue-quickstart wx-mpvue-demo\n// 安装依赖\n$ cd wx-mpvue-demo\n$ npm install\n// 启动构建\n$ npm run dev\n")])])]),n("p",[e._v("一个简单的工程目录就搭建完成了。")]),e._v(" "),n("h2",{attrs:{id:"封装自己的公用模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#封装自己的公用模块"}},[e._v("#")]),e._v(" 封装自己的公用模块")]),e._v(" "),n("h3",{attrs:{id:"_1-封装totast"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-封装totast"}},[e._v("#")]),e._v(" 1.封装"),n("code",[e._v("Totast")])]),e._v(" "),n("p",[e._v("由于小程序原生的消息提示实在是让人崩溃，所以我们先自己来封装下 "),n("code",[e._v("totast")]),e._v("， 在 "),n("code",[e._v("util")]),e._v("目录新建 "),n("code",[e._v("totast.js")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class toast {\n  static msg (title, {icon = 1}) {\n    wx.showToast({\n      title,\n      icon: ['success', 'none'][icon]\n    })\n  }\n  static confirm ({title = '提示', content, callback}) {\n    wx.showModal({\n      title,\n      content,\n      success: function (res) {\n        if (res.confirm) {\n          callback(res.confirm)\n        } else if (res.cancel) {\n          console.log('用户点击取消')\n        }\n      }\n    })\n  }\n}\n\nexport default toast\n")])])]),n("p",[e._v("我们挂载到***main.js***中， 在组件里可以方便调用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import toast from './utils/toast'\nVue.prototype.$totast = toast\n")])])]),n("h3",{attrs:{id:"_2-封装-publicrequest"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-封装-publicrequest"}},[e._v("#")]),e._v(" 2.封装 "),n("code",[e._v("publicRequest")])]),e._v(" "),n("p",[e._v("小程序的网路请求不是很方便，我们也对其封装一下。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import totast from './toast'\n\nconst Authorization = 'Bearer xxx'\nclass publicRequest {\n  static get ({url, data = {}, isJson = false, hasToken = true, header}) {\n    let hasNetWork = checkNetWork()\n\n    if (!hasNetWork) {\n      totast.msg('网路异常', {})\n      return false\n    }\n\n    let contentType = isJson ? 'application/json' : 'application/x-www-form-urlencoded'\n    let _authorization = hasToken ? {'Authorization': Authorization} : {}\n    let _header = Object.assign({'content-type': contentType}, _authorization, header)\n    wx.showLoading({title: '加载中...'})\n    return new Promise((resolve, reject) => {\n      wx.request({\n        url,\n        header: _header,\n        dataType: 'json',\n        method: 'GET',\n        data,\n        success: (res) => {\n          if (res.statusCode === 200) {\n            resolve(res.data)\n          }\n        },\n        fail: (error) => {\n          totast.msg(error.errMsg, {})\n          reject(error)\n        },\n        complete: res => {\n          if (res.statusCode !== 200) {\n            totastMessage({\n              statusCode: res.statusCode,\n              message: res.data.msg\n            })\n          }\n          wx.hideLoading()\n        }\n      })\n    })\n  }\n  static post ({url, data = {}, isJson = false, hasToken = true, header}) {\n    let hasNetWork = checkNetWork()\n\n    if (!hasNetWork) {\n      totast.msg('网路异常', {})\n      return false\n    }\n    let contentType = isJson ? 'application/json' : 'application/x-www-form-urlencoded'\n    let _authorization = hasToken ? {'Authorization': Authorization} : {}\n    let _header = Object.assign({'content-type': contentType}, _authorization, header)\n    wx.showLoading({title: '加载中...'})\n    return new Promise((resolve, reject) => {\n      wx.request({\n        url,\n        header: _header,\n        method: 'POST',\n        data,\n        dataType: 'json',\n        success: (res) => {\n          resolve(res.data)\n        },\n        fail: (error) => {\n          totast.msg(error.errMsg, {})\n          reject(error)\n        },\n        complete: res => {\n          if (res.statusCode !== 200) {\n            totastMessage({\n              statusCode: res.statusCode,\n              message: res.data.msg\n            })\n          }\n          wx.hideLoading()\n        }\n      })\n    })\n  }\n}\nconst checkNetWork = function () {\n  return new Promise(resolve => {\n    wx.getNetworkType({\n      success: res => {\n        let networkType = res.networkType;\n        if (networkType === 'none' || networkType === 'unknown') {\n          resolve(false)\n        } else {\n          resolve(true)\n        }\n      },\n      fail: () => {\n        resolve(false)\n      }\n    })\n  })\n}\nconst totastMessage = function ({statusCode, message}) {\n  switch (statusCode) {\n    case 502:\n      totast.msg('服务器异常', {})\n      break\n    default:\n      totast.msg(message, {})\n      break\n  }\n}\nexport default publicRequest\n")])])]),n("p",[e._v("我们呢也对其挂载到 "),n("code",[e._v("vue")]),e._v(" 上去。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import publicRequest from './utils/publicRequest'\nVue.prototype.$http = publicRequest\n")])])]),n("h3",{attrs:{id:"_3-扫一扫的调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-扫一扫的调用"}},[e._v("#")]),e._v(" 3.扫一扫的调用")]),e._v(" "),n("p",[e._v("我们先公用出扫一扫")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const handleScan = function () {\n  return new Promise((resolve, reject) => {\n    wx.scanCode({\n      success: (res) => {\n        console.log(res)\n        resolve(res)\n      },\n      fail: error => {\n        reject(error)\n      }\n    })\n  })\n}\nexport default handleScan\n")])])]),n("p",[e._v("公用出来后挂载到我们的 "),n("code",[e._v("vue")]),e._v(" 上后可以在组件里直接调用 "),n("code",[e._v("this.$handleScan")]),e._v("，如")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("methods: {\n  async scanCodeInfo () {\n    let goods = await this.$handleScan()\n    console.log(goods)\n    this.codeInfo = goods.result\n  }\n}\n")])])]),n("h3",{attrs:{id:"_4-如何引入iconfont图标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何引入iconfont图标"}},[e._v("#")]),e._v(" 4.如何引入"),n("code",[e._v("iconfont")]),e._v("图标")]),e._v(" "),n("p",[e._v("因为小程序的wxss文件的font-face的url不接受http地址作为参数,但可以接受base64,因此需将字体文件下载后,转换为base64，然后引用。\n所以我们可以在阿里巴巴图标库下载下来，将"),n("code",[e._v("iconfont.ttf")]),e._v("转换。转换地址：https://transfonter.org/")]),e._v(" "),n("p",[n("img",{attrs:{src:"/img/bVbabYs",alt:"图片描述"}})]),e._v(" "),n("p",[e._v("下载文件后解压得到"),n("code",[e._v("stylesheet.css")]),e._v("文件，将此文件引入到项目。最后写一个公用的样式:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('.icon:after{\n  font-family: \'iconfont\';\n  font-weight: lighter;\n  font-style: normal;\n}\n\n.icon-saoyisao:after { content: "\\e7c7"; }\n\n.icon-hebingxingzhuang:after { content: "\\e61a"; }\n')])])]),n("p",[e._v("就可以使用了。")]),e._v(" "),n("p",[e._v("现在我们可以愉快的使用其开发了，如果对 "),n("code",[e._v("vue")]),e._v("开发比较熟悉的话，完全迁移过来是没有问题的。最后附上"),n("a",{attrs:{href:"https://github.com/one-pupil/wx-mpvue",target:"_blank",rel:"noopener noreferrer"}},[e._v("项目demo"),n("OutboundLink")],1),e._v("和"),n("a",{attrs:{href:"https://imondo.cn/blog/article/37",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文地址"),n("OutboundLink")],1),e._v("\n每个人都有第一次，哈哈~这就是我的第一次写文章，不到之处，望指正。")])])}),[],!1,null,null,null);t.default=a.exports}}]);