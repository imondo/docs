(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{228:function(t,e,n){"use strict";n.r(e);var s=n(0),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"利用js-xlsx前端导出excel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用js-xlsx前端导出excel"}},[t._v("#")]),t._v(" 利用js-xlsx前端导出Excel")]),t._v(" "),n("p",[t._v("由于项目临时加入导出Excel功能，后台童靴没有多余时间来处理，想前端来处理导出。")]),t._v(" "),n("p",[t._v("查询了前端导出方法，大部分是利用"),n("code",[t._v("js-xlsx")]),t._v("来做处理，按照"),n("a",{attrs:{href:"https://github.com/SheetJS/js-xlsx",target:"_blank",rel:"noopener noreferrer"}},[t._v("js-xlsx"),n("OutboundLink")],1),t._v("来导出"),n("code",[t._v("excel")]),t._v("时是没有样式处理的。需要我们来利用该库的专业版本才能设置样式。")]),t._v(" "),n("p",[t._v("这里就需要"),n("a",{attrs:{href:"https://github.com/protobi/js-xlsx/tree/beta",target:"_blank",rel:"noopener noreferrer"}},[t._v("xlsx-style"),n("OutboundLink")],1),t._v("来处理，给我们的"),n("code",[t._v("excel")]),t._v("文件来添加样式。")]),t._v(" "),n("h2",{attrs:{id:"利用数据导出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用数据导出"}},[t._v("#")]),t._v(" 利用数据导出")]),t._v(" "),n("p",[t._v("拿到后端数据，先要对数据进行组装才能导出我们想要的文件格式。如果想文件有样式只能利用"),n("code",[t._v("xlsx-style")]),t._v(";")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("npm install xlsx-style\n")])])]),n("p",[t._v("拷贝下载下来的文件目录"),n("code",[t._v("dist")]),t._v("里的"),n("code",[t._v("xlsx.core.min.js")]),t._v("，引入文件")]),t._v(" "),n("img",{attrs:{src:"_img/editor/code.png"}}),t._v(" "),n("p",[t._v("这里借鉴这位"),n("a",{attrs:{href:"https://www.jianshu.com/p/5cfe0ead22cd",target:"_blank",rel:"noopener noreferrer"}},[t._v("博主"),n("OutboundLink")],1),t._v("主要代码，整理了下，可以实现表头与导出文件名称。")]),t._v(" "),n("p",[t._v("具体调用可以"),n("a",{attrs:{href:"https://imondo.cn/excelj/",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看DEMO"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * @param {Array} header 表格头部\n * @param {Array} body 表格数据\n * @param {String} title 表格导出名称\n * @param {Boolean} hasTitle 是否需要表格标题\n */\nfunction ExportsEXCL() {\n  this.downLoad = ({\n    header = [],\n    body = [],\n    title = 'excel',\n    hasTitle = false,\n  }) => {\n    const styleCell = this.setBorderStyle();\n\n    const _headers = header\n      .map((v, i) => {\n        let key = Object.keys(v);\n        return Object.assign(\n          {},\n          {\n            v: `${v[key[0]]}<key>${key[0]}`,\n            position: String.fromCharCode(65 + i) + (hasTitle ? 1 : 0)\n          }\n        );\n      })\n      .reduce(\n        (prev, next) =>\n          Object.assign({}, prev, {\n            [next.position]: { v: next.v, s: styleCell }\n          }),\n        {}\n      );\n    const _body = body\n      .map((v, i) =>\n        header.map((k, j) => {\n          let key = Object.keys(k);\n          return Object.assign(\n            {},\n            {\n              v: v[key[0]],\n              position: String.fromCharCode(65 + j) + (i + (hasTitle ? 2 : 1))\n            }\n          );\n        })\n      )\n      .reduce((prev, next) => prev.concat(next))\n      .reduce(\n        (prev, next) =>\n          Object.assign({}, prev, {\n            [next.position]: { v: next.v, s: styleCell }\n          }),\n        {}\n      );\n\n    const mergeThead = this.setMergeThead(_headers, hasTitle, title);\n\n    const _merges = this.setTableMerges(header, _headers, hasTitle);\n\n    const _thead = this.setTableThead(mergeThead);\n\n    const output = Object.assign({}, _thead, _body);\n\n    const outputPos = Object.keys(output).sort();\n\n    const ref = outputPos[0] + ':' + outputPos[outputPos.length - 1];\n\n    const wb = {\n      SheetNames: ['mySheet'],\n      Sheets: {\n        mySheet: Object.assign({}, output, { '!ref': ref, '!merges': _merges })\n      }\n    };\n\n    this.save(wb, `${title}.xlsx`);\n  };\n\n  this.setTableThead = wb => {\n    for (let key in wb) {\n      let i = wb[key].v.indexOf('<key>');\n      if (wb[key].v.includes('<key>')) {\n        wb[key].v = wb[key].v.substr(0, i);\n      }\n    }\n    return wb;\n  };\n\n  // 设置合并表头\n  this.setTableMerges = (header, wb, hasTitle) => {\n    let _merges = [];\n    let len = header.length - 1;\n    if (hasTitle) {\n      let o = {\n        s: {\n          c: 0,\n          r: 0\n        },\n        e: {\n          c: len,\n          r: 0\n        }\n      };\n      _merges.push(o);\n    }\n    return [..._merges];\n  };\n\n  // 设置表头\n  this.setMergeThead = (wb, merge, hasTitle, title) => {\n    const borderAll = {\n      top: {\n        style: 'thin'\n      },\n      bottom: {\n        style: 'thin'\n      },\n      left: {\n        style: 'thin'\n      },\n      right: {\n        style: 'thin'\n      }\n    };\n    if (hasTitle) {\n      wb['A1'] = {\n        v: `${title}`,\n        s: {\n          border: borderAll,\n          font: {\n            sz: 18,\n            bold: true\n          },\n          alignment: {\n            horizontal: 'center'\n          }\n        }\n      };\n    }\n    return wb;\n  };\n\n  this.setBorderStyle = () => {\n    const borderAll = {\n      top: {\n        style: 'thin'\n      },\n      bottom: {\n        style: 'thin'\n      },\n      left: {\n        style: 'thin'\n      },\n      right: {\n        style: 'thin'\n      }\n    };\n    return { border: borderAll };\n  };\n\n  this.save = (wb, fileName) => {\n    let wopts = {\n      bookType: 'xlsx',\n      bookSST: false,\n      type: 'binary'\n    };\n    let xw = XLSX.write(wb, wopts);\n    let obj = new Blob([this.s2ab(xw)], {\n      type: ''\n    });\n    let elem = document.createElement('a');\n    elem.download = fileName || '下载';\n    elem.href = URL.createObjectURL(obj);\n    elem.click();\n    setTimeout(function() {\n      URL.revokeObjectURL(obj);\n    }, 100);\n  };\n\n  this.s2ab = s => {\n    if (typeof ArrayBuffer !== 'undefined') {\n      var buf = new ArrayBuffer(s.length);\n      var view = new Uint8Array(buf);\n      for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;\n      return buf;\n    } else {\n      var buf = new Array(s.length);\n      for (var i = 0; i != s.length; ++i) buf[i] = s.charCodeAt(i) & 0xff;\n      return buf;\n    }\n  };\n\n  // 根据val查询Object key\n  this.findKey = (val, obj) => {\n    return Object.keys(obj).find(v => obj[v] === val);\n  };\n}\n")])])]),n("h2",{attrs:{id:"利用dom导出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用dom导出"}},[t._v("#")]),t._v(" 利用DOM导出")]),t._v(" "),n("p",[n("code",[t._v("js-xlsx")]),t._v("提供了一个直接导出HTML上的DOM表格方法"),n("code",[t._v("XLSX.utils.table_to_book")]),t._v("，但是导出的"),n("code",[t._v("excel")]),t._v("文件时没有任何样式，利用"),n("code",[t._v("xlsx-style")]),t._v("中的"),n("code",[t._v("xlsx.full.min.js")]),t._v("来导出时，没有上面这个方法，后面取了巧。")]),t._v(" "),n("p",[t._v("把"),n("code",[t._v("xlsx-style")]),t._v("中的"),n("code",[t._v("full")]),t._v("文件导出来的"),n("code",[t._v("XLSX")]),t._v("改成了"),n("code",[t._v("STYLEXLSX")]),t._v("；")]),t._v(" "),n("img",{attrs:{src:"_img/editor/carbon.png"}}),t._v(" "),n("p",[t._v("引用如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<script src="//unpkg.com/xlsx/dist/shim.min.js"><\/script>\n<script src="//unpkg.com/blob.js@1.0.1/Blob.js"><\/script>\n<script src="//unpkg.com/file-saver@1.3.3/FileSaver.js"><\/script>\n<script src="./STYLEXLSX.full.min.js"><\/script>\n<script src="./xlsx.full.min.js"><\/script>\n\n<script src="./index.js"><\/script>\n')])])]),n("p",[t._v("利用"),n("code",[t._v("js-xlsx")]),t._v("来导出表格数据，用"),n("code",[t._v("STYLEXLSX.write")]),t._v("来写入数据。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("STYLEXLSX.write(\n  wb,\n  {\n    bookType: type == undefined ? 'xlsx' : type,\n    bookSST: false,\n    type: 'binary'\n  }\n)\n")])])]),n("p",[t._v("具体主要代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * \n * @param {Object} dom table的dom元素\n * @param {Object} name 导出的表名\n * @param {Object} type 导出的类型\n * \n */\nfunction exportExl(dom, name = '导出数据', type) {\n\tvar wb = XLSX.utils.table_to_book(dom, {sheet: \"Sheet JS\"});\n\tvar wopts = {\n    bookType: 'xlsx',\n    bookSST: true,\n    type: 'binary',\n    cellStyles: true\n\t};\n\n\tsetExlStyle(wb['Sheets']['Sheet JS']);\n\t\n\tlet tmpDown = new Blob(\n\t\t[\n\t\t\tthis.s2ab(\n\t\t\t\tSTYLEXLSX.write(\n\t\t\t\t\twb,\n\t\t\t\t\t{\n\t\t\t\t\t\tbookType: type == undefined ? 'xlsx' : type,\n\t\t\t\t\t\tbookSST: false,\n\t\t\t\t\t\ttype: 'binary'\n\t\t\t\t\t} //这里的数据是用来定义导出的格式类型\n\t\t\t\t)\n\t\t\t)\n\t\t],\n\t\t{\n\t\t\ttype: ''\n\t\t}\n\t);\n\tsaveAs(\n\t\ttmpDown,\n\t\t`${name}` +\n\t\t\t'.' +\n\t\t\t(wopts.bookType == 'biff2' ? 'xls' : wopts.bookType)\n\t);\t\n}\n\nfunction saveAs(obj, fileName) {\n\tlet tmpa = document.createElement('a');\n\ttmpa.download = fileName || '下载';\n\ttmpa.href = URL.createObjectURL(obj);\n\ttmpa.click();\n\tsetTimeout(function() {\n\t\tURL.revokeObjectURL(obj);\n\t}, 100);\n}\t\n\n\nfunction s2ab (s){\n\tif (typeof ArrayBuffer !== 'undefined') {\n\t\tvar buf = new ArrayBuffer(s.length);\n\t\tvar view = new Uint8Array(buf);\n\t\tfor (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;\n\t\treturn buf;\n\t} else {\n\t\tvar buf = new Array(s.length);\n\t\tfor (var i = 0; i != s.length; ++i) buf[i] = s.charCodeAt(i) & 0xff;\n\t\treturn buf;\n\t}\n};\n\nfunction setExlStyle (data) {  \n\t\n  let borderAll = {  //单元格外侧框线\n    top: {\n      style: 'thin'\n    },\n    bottom: {\n      style: 'thin'\n    },\n    left: {\n      style: 'thin'\n    },\n    right: {\n      style: 'thin'\n    }\n  }; \n\tdata['!cols'] = [];\n\tfor (let key in data) {\n\t\tif (data[key] instanceof Object) {\n\t\t\tdata[key].s = {\n\t\t\t\tborder: borderAll,\n\t\t\t\talignment: {\n\t\t\t\t\thorizontal: 'center'   //水平居中对其\n\t\t\t\t},\n\t\t\t\tnumFmt: 0\n\t\t\t}\n\t\t\tdata['!cols'].push({wpx: 170});\n\t\t}\n\t}\n\treturn data;\n}\n")])])]),n("h2",{attrs:{id:"缺陷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺陷"}},[t._v("#")]),t._v(" 缺陷")]),t._v(" "),n("p",[t._v("如果用数据来控制我们的导出，发现配置多级表头时会好复杂，所以没取深究了，用DOM来导出，又发现如果"),n("strong",[t._v("要导出分页表格")]),t._v("时只能导出当前页的数据。")]),t._v(" "),n("p",[t._v("而且现在所有的表格都可能不是规范的表格，每个表格结构可能都不相同，只能单独处理。")]),t._v(" "),n("p",[t._v("当前所有代码"),n("a",{attrs:{href:"https://github.com/one-pupil/study/tree/master/excel",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看"),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);